{"version":3,"sources":["../src/index.ts"],"names":["Sigar","execa","fs","ora","path","which","v4","uuidv4","COMMAND","spinner","sigar","defaultOptions","commandTemplate","cwd","process","terminals","darwin","linux","getDefaultTerminalCommand","REGEX","realpath","terminalPath","command","match","message","indexOf","undefined","createSafeCommand","uid","platform","resolve","__dirname","Buffer","from","toString","hasTerminal","terminal","Array","isArray","openTerminal","options","openDefaultTerminal","_terminals","_i","fullOptions","mergeDefaults","Error","defaultTerminalCommand","sort","a","safeCommand","join","warn","map","shell","stdio","result","tryOpenTerminal","exit","error","failed","cmd","arg","replace","args","p","Promise","r","setTimeout","waitOnTerminal","on","pid","uidToPid","kill","procList","find","getProcArgs","pollInterval","timeout","Object","entries","reduce","osTerminals","os","existingTerminal","push"],"mappings":"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","sourcesContent":["import Sigar from 'node-sigar';\nimport execa, { ExecaError } from 'execa';\nimport fs from 'fs-extra';\nimport ora from 'ora';\nimport path from 'path';\nimport which from 'which';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Options, Terminals, Terminal } from '~/types';\n\nconst COMMAND = '([{<COMMAND>}])';\nconst spinner = ora();\nconst sigar = new Sigar();\n\nexport const defaultOptions: Options = {\n  commandTemplate: COMMAND,\n  cwd: process.cwd(),\n  terminals: {\n    darwin: [\n      ['osascript', '-e', `tell app \"Terminal\" to do script \"${COMMAND}\"`]\n    ],\n    linux: [\n      ['gnome-terminal', '--', 'sh', '-c', COMMAND],\n      ['xterm', '-e', `sh -c \"${COMMAND}\"`],\n      ['konsole', '-e', `sh -c \"${COMMAND}\"`],\n      ['terminator', '-u', '-e', `sh -c \"${COMMAND}\"`]\n    ]\n  }\n};\n\nasync function getDefaultTerminalCommand(): Promise<string | undefined> {\n  try {\n    const REGEX = /[^/]+$/g;\n    const terminalPath = await fs.realpath(await which('x-terminal-emulator'));\n    const command = [...(terminalPath.match(REGEX) || [])]?.[0];\n    return command;\n  } catch (err) {\n    if (err.message.indexOf('not found') > -1) return undefined;\n    throw err;\n  }\n}\n\nfunction createSafeCommand(uid: string, command: string) {\n  if (process.platform === 'darwin') {\n    command = `cd ${process.cwd()} && ${command}`;\n  }\n  return `node ${path.resolve(__dirname, '../lib/shb64')} ${Buffer.from(\n    command\n  ).toString('base64')} open-terminal:uid:${uid}`;\n}\n\nasync function hasTerminal(terminal: Terminal | string) {\n  const command = Array.isArray(terminal) ? terminal?.[0] || '' : terminal;\n  try {\n    await which(command);\n    return true;\n  } catch (err) {\n    if (err.message.indexOf('not found') > -1) return false;\n    throw err;\n  }\n}\n\nexport default async function openTerminal(\n  command: string | string[],\n  options?: Partial<Options>\n) {\n  return openDefaultTerminal(command, options);\n}\n\nasync function openDefaultTerminal(\n  command: string | string[],\n  options?: Partial<Options>,\n  _terminals?: Terminal[],\n  _i = 0\n) {\n  const uid = uuidv4();\n  const fullOptions = mergeDefaults(options);\n  if (!_terminals) {\n    const terminals = fullOptions.terminals[process.platform];\n    if (!terminals) {\n      throw new Error(`operating system ${process.platform} not supported`);\n    }\n    const defaultTerminalCommand = await getDefaultTerminalCommand();\n    _terminals = terminals.sort((a: Terminal) => {\n      if ((a[0] || '').indexOf(defaultTerminalCommand || '') > -1) return -1;\n      return 1;\n    });\n  }\n  const safeCommand = createSafeCommand(\n    uid,\n    (Array.isArray(command) ? command : [command]).join(' ')\n  );\n  const terminal = _terminals[_i];\n  if (!terminal) {\n    spinner.warn(\n      `running process in background because terminal could not be found\ntry installing on of the following terminals to run correctly: ${_terminals\n        .map((terminal: Terminal) => terminal[0])\n        .join(', ')}\n`\n    );\n    const result = await execa(safeCommand, {\n      cwd: fullOptions.cwd,\n      shell: true,\n      stdio: 'inherit'\n    });\n    return result;\n  }\n  if (!(await hasTerminal(terminal))) {\n    return openDefaultTerminal(command, options, _terminals, ++_i);\n  }\n  try {\n    await tryOpenTerminal(uid, terminal, safeCommand, fullOptions);\n    return process.exit();\n  } catch (err) {\n    const error: ExecaError = err;\n    if (error.command && error.failed) {\n      return openDefaultTerminal(command, options, _terminals, ++_i);\n    }\n    throw err;\n  }\n}\n\nasync function tryOpenTerminal(\n  uid: string,\n  terminal: Terminal,\n  command: string | string[],\n  options?: Options\n) {\n  const { commandTemplate, cwd } = mergeDefaults(options);\n  const [cmd] = terminal;\n  if (!cmd) {\n    throw new Error(`terminal ${terminal[0]} not found`);\n  }\n  const [, ...args] = terminal.map((arg: string) =>\n    arg.replace(\n      commandTemplate,\n      Array.isArray(command) ? command.join(' ') : command\n    )\n  );\n  const p = execa(cmd, args, {\n    stdio: 'inherit',\n    cwd\n  });\n  await new Promise((r) => setTimeout(r, 1000));\n  await waitOnTerminal(uid);\n  const result = await p;\n  process.on('SIGINT', () => {\n    const pid = uidToPid(uid);\n    if (pid) process.kill(pid);\n    process.exit();\n  });\n  process.on('SIGTERM', () => {\n    const pid = uidToPid(uid);\n    if (pid) process.kill(pid);\n    process.exit();\n  });\n  return result;\n}\n\nfunction uidToPid(uid: string) {\n  return sigar.procList.find((pid: number) => {\n    return sigar.getProcArgs(pid).join(' ').indexOf(uid) > -1;\n  });\n}\n\nasync function waitOnTerminal(\n  uid: string,\n  pollInterval = 3000,\n  timeout?: number\n) {\n  await new Promise((r) => setTimeout(r, pollInterval));\n  const pid = uidToPid(uid);\n  if (!pid) return undefined;\n  return waitOnTerminal(\n    uid,\n    timeout,\n    typeof timeout === 'undefined' ? timeout : timeout - pollInterval\n  );\n}\n\nfunction mergeDefaults(options?: Partial<Options>): Options {\n  return {\n    ...defaultOptions,\n    ...(options || {}),\n    terminals: {\n      ...defaultOptions.terminals,\n      ...Object.entries(options?.terminals || {}).reduce(\n        (osTerminals: Terminals, [os, terminals]: [string, Terminal[]]) => {\n          osTerminals[os] = (terminals || []).reduce(\n            (terminals: Terminal[], terminal: Terminal) => {\n              if (\n                !terminals.find((existingTerminal: Terminal) => {\n                  return existingTerminal[0] === terminal[0];\n                })\n              ) {\n                terminals.push(terminal);\n              }\n              return terminals;\n            },\n            []\n          );\n          return osTerminals;\n        },\n        {}\n      )\n    }\n  };\n}\n\nexport * from '~/types';\n"],"file":"index.js"}