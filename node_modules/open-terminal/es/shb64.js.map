{"version":3,"sources":["../src/shb64.ts"],"names":["execa","Buffer","from","process","argv","toString","shell","stdio","exitCode","exit","catch","console","error"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkC,OAAlC;;AAEA,yDAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAESA,KAAK,CAACC,MAAM,CAACC,IAAP,CAAYC,OAAO,CAACC,IAAR,CAAa,CAAb,CAAZ,EAA6B,QAA7B,EAAuCC,QAAvC,EAAD,EAAoD;AAC7DC,YAAAA,KAAK,EAAE,IADsD;AAE7DC,YAAAA,KAAK,EAAE;AAFsD,WAApD,CAFd;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,+BAOWC,QAPX,SAOWA,QAPX;;AAAA,cAQQA,QARR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AASGL,UAAAA,OAAO,CAACM,IAAR,CAAaD,QAAb;;AATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,KAWKE,KAXL,CAWWC,OAAO,CAACC,KAXnB","sourcesContent":["import execa, { ExecaError } from 'execa';\n\n(async () => {\n  try {\n    await execa(Buffer.from(process.argv[2], 'base64').toString(), {\n      shell: true,\n      stdio: 'inherit'\n    });\n  } catch (err: any) {\n    const { exitCode } = err as ExecaError;\n    if (!exitCode) throw err;\n    process.exit(exitCode);\n  }\n})().catch(console.error);\n"],"file":"shb64.js"}