import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.regexp.to-string.js";
import execa from 'execa';

_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
  var _ref2, exitCode;

  return _regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return execa(Buffer.from(process.argv[2], 'base64').toString(), {
            shell: true,
            stdio: 'inherit'
          });

        case 3:
          _context.next = 11;
          break;

        case 5:
          _context.prev = 5;
          _context.t0 = _context["catch"](0);
          _ref2 = _context.t0, exitCode = _ref2.exitCode;

          if (exitCode) {
            _context.next = 10;
            break;
          }

          throw _context.t0;

        case 10:
          process.exit(exitCode);

        case 11:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, null, [[0, 5]]);
}))().catch(console.error);
//# sourceMappingURL=shb64.js.map