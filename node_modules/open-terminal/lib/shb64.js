(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["@babel/runtime/regenerator", "core-js/modules/es.object.to-string.js", "core-js/modules/es.regexp.to-string.js", "@babel/runtime/helpers/asyncToGenerator", "execa"], factory);
  } else if (typeof exports !== "undefined") {
    factory(require("@babel/runtime/regenerator"), require("core-js/modules/es.object.to-string.js"), require("core-js/modules/es.regexp.to-string.js"), require("@babel/runtime/helpers/asyncToGenerator"), require("execa"));
  } else {
    var mod = {
      exports: {}
    };
    factory(global.regenerator, global.esObjectToString, global.esRegexpToString, global.asyncToGenerator, global.execa);
    global.shb64 = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_regenerator, _esObjectToString, _esRegexpToString, _asyncToGenerator2, _execa) {
  "use strict";

  var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

  _regenerator = _interopRequireDefault(_regenerator);
  _asyncToGenerator2 = _interopRequireDefault(_asyncToGenerator2);
  _execa = _interopRequireDefault(_execa);
  (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
    var _ref2, exitCode;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return (0, _execa.default)(Buffer.from(process.argv[2], 'base64').toString(), {
              shell: true,
              stdio: 'inherit'
            });

          case 3:
            _context.next = 11;
            break;

          case 5:
            _context.prev = 5;
            _context.t0 = _context["catch"](0);
            _ref2 = _context.t0, exitCode = _ref2.exitCode;

            if (exitCode) {
              _context.next = 10;
              break;
            }

            throw _context.t0;

          case 10:
            process.exit(exitCode);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 5]]);
  }))().catch(console.error);
});
//# sourceMappingURL=shb64.js.map