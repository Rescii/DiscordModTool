"use strict";

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.entries");

require("core-js/modules/es.object.get-own-property-descriptors");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getParents = getParents;
exports.getPidsProcInfo = getPidsProcInfo;
exports.default = psTree;

var _nodeSigar = _interopRequireDefault(require("node-sigar"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const sigar = new _nodeSigar.default();

function getParents(procNode) {
  if (!procNode.parent) return [];
  return [...getParents(procNode.parent), procNode.parent];
}

function getPidsProcInfo() {
  return sigar.procList.reduce((pidsProcInfo, pid) => {
    let args = [];

    try {
      args = sigar.getProcArgs(pid); // eslint-disable-next-line no-empty
    } catch (err) {}

    let state = {};

    try {
      state = sigar.getProcState(pid); // eslint-disable-next-line no-empty
    } catch (err) {}

    pidsProcInfo[pid.toString()] = new Proxy(_objectSpread({
      args,
      pid
    }, state), {
      get(target, prop) {
        if (prop === 'parents') return getParents(target);
        return target[prop];
      }

    });
    return pidsProcInfo;
  }, {});
}

function psTree(rootPid) {
  const pidsProcInfo = getPidsProcInfo();

  function getParent(procNode) {
    const parentNode = procNode.ppid ? pidsProcInfo[procNode.ppid.toString()] || null : null;

    if (parentNode) {
      if (!parentNode.children) parentNode.children = [];
      parentNode.children.push(procNode);

      if (typeof parentNode.depth !== 'number') {
        parentNode.parent = getParent(parentNode);
        parentNode.depth = parentNode.parent ? parentNode.parent.depth + 1 : 0;
      }
    }

    return parentNode;
  }

  return Object.entries(pidsProcInfo).reduce( // eslint-disable-next-line @typescript-eslint/no-unused-vars
  (psTree, [_pid, pidProcInfo]) => {
    const procNode = pidProcInfo;
    if (!procNode.children) procNode.children = [];
    procNode.parent = getParent(procNode);
    procNode.depth = procNode.parent ? procNode.parent.depth + 1 : 0;

    if (typeof rootPid === 'number' ? procNode.pid === rootPid : !psTree) {
      psTree = procNode;
    }

    return psTree;
  }, null);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJzaWdhciIsIlNpZ2FyIiwiZ2V0UGFyZW50cyIsInByb2NOb2RlIiwicGFyZW50IiwiZ2V0UGlkc1Byb2NJbmZvIiwicHJvY0xpc3QiLCJyZWR1Y2UiLCJwaWRzUHJvY0luZm8iLCJwaWQiLCJhcmdzIiwiZ2V0UHJvY0FyZ3MiLCJlcnIiLCJzdGF0ZSIsImdldFByb2NTdGF0ZSIsInRvU3RyaW5nIiwiUHJveHkiLCJnZXQiLCJ0YXJnZXQiLCJwcm9wIiwicHNUcmVlIiwicm9vdFBpZCIsImdldFBhcmVudCIsInBhcmVudE5vZGUiLCJwcGlkIiwiY2hpbGRyZW4iLCJwdXNoIiwiZGVwdGgiLCJPYmplY3QiLCJlbnRyaWVzIiwiX3BpZCIsInBpZFByb2NJbmZvIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7O0FBRUEsTUFBTUEsS0FBSyxHQUFHLElBQUlDLGtCQUFKLEVBQWQ7O0FBNEJPLFNBQVNDLFVBQVQsQ0FBb0JDLFFBQXBCLEVBQW9EO0FBQ3pELE1BQUksQ0FBQ0EsUUFBUSxDQUFDQyxNQUFkLEVBQXNCLE9BQU8sRUFBUDtBQUN0QixTQUFPLENBQUMsR0FBR0YsVUFBVSxDQUFDQyxRQUFRLENBQUNDLE1BQVYsQ0FBZCxFQUFpQ0QsUUFBUSxDQUFDQyxNQUExQyxDQUFQO0FBQ0Q7O0FBRU0sU0FBU0MsZUFBVCxHQUF5QztBQUM5QyxTQUFPTCxLQUFLLENBQUNNLFFBQU4sQ0FBZUMsTUFBZixDQUFzQixDQUFDQyxZQUFELEVBQTZCQyxHQUE3QixLQUE2QztBQUN4RSxRQUFJQyxJQUFjLEdBQUcsRUFBckI7O0FBQ0EsUUFBSTtBQUNGQSxNQUFBQSxJQUFJLEdBQUdWLEtBQUssQ0FBQ1csV0FBTixDQUFrQkYsR0FBbEIsQ0FBUCxDQURFLENBRUY7QUFDRCxLQUhELENBR0UsT0FBT0csR0FBUCxFQUFZLENBQUU7O0FBQ2hCLFFBQUlDLEtBQXFCLEdBQUcsRUFBNUI7O0FBQ0EsUUFBSTtBQUNGQSxNQUFBQSxLQUFLLEdBQUdiLEtBQUssQ0FBQ2MsWUFBTixDQUFtQkwsR0FBbkIsQ0FBUixDQURFLENBRUY7QUFDRCxLQUhELENBR0UsT0FBT0csR0FBUCxFQUFZLENBQUU7O0FBQ2hCSixJQUFBQSxZQUFZLENBQUNDLEdBQUcsQ0FBQ00sUUFBSixFQUFELENBQVosR0FBK0IsSUFBSUMsS0FBSjtBQUUzQk4sTUFBQUEsSUFGMkI7QUFHM0JELE1BQUFBO0FBSDJCLE9BSXhCSSxLQUp3QixHQU03QjtBQUNFSSxNQUFBQSxHQUFHLENBQUNDLE1BQUQsRUFBY0MsSUFBZCxFQUFvQjtBQUNyQixZQUFJQSxJQUFJLEtBQUssU0FBYixFQUF3QixPQUFPakIsVUFBVSxDQUFDZ0IsTUFBRCxDQUFqQjtBQUN4QixlQUFPQSxNQUFNLENBQUNDLElBQUQsQ0FBYjtBQUNEOztBQUpILEtBTjZCLENBQS9CO0FBYUEsV0FBT1gsWUFBUDtBQUNELEdBekJNLEVBeUJKLEVBekJJLENBQVA7QUEwQkQ7O0FBRWMsU0FBU1ksTUFBVCxDQUFnQkMsT0FBaEIsRUFBMEM7QUFDdkQsUUFBTWIsWUFBWSxHQUFHSCxlQUFlLEVBQXBDOztBQUNBLFdBQVNpQixTQUFULENBQW1CbkIsUUFBbkIsRUFBd0Q7QUFDdEQsVUFBTW9CLFVBQVUsR0FBR3BCLFFBQVEsQ0FBQ3FCLElBQVQsR0FDZGhCLFlBQVksQ0FBQ0wsUUFBUSxDQUFDcUIsSUFBVCxDQUFjVCxRQUFkLEVBQUQsQ0FBYixJQUF3RCxJQUR6QyxHQUVmLElBRko7O0FBR0EsUUFBSVEsVUFBSixFQUFnQjtBQUNkLFVBQUksQ0FBQ0EsVUFBVSxDQUFDRSxRQUFoQixFQUEwQkYsVUFBVSxDQUFDRSxRQUFYLEdBQXNCLEVBQXRCO0FBQzFCRixNQUFBQSxVQUFVLENBQUNFLFFBQVgsQ0FBb0JDLElBQXBCLENBQXlCdkIsUUFBekI7O0FBQ0EsVUFBSSxPQUFPb0IsVUFBVSxDQUFDSSxLQUFsQixLQUE0QixRQUFoQyxFQUEwQztBQUN4Q0osUUFBQUEsVUFBVSxDQUFDbkIsTUFBWCxHQUFvQmtCLFNBQVMsQ0FBQ0MsVUFBRCxDQUE3QjtBQUNBQSxRQUFBQSxVQUFVLENBQUNJLEtBQVgsR0FBbUJKLFVBQVUsQ0FBQ25CLE1BQVgsR0FBb0JtQixVQUFVLENBQUNuQixNQUFYLENBQWtCdUIsS0FBbEIsR0FBMEIsQ0FBOUMsR0FBa0QsQ0FBckU7QUFDRDtBQUNGOztBQUNELFdBQU9KLFVBQVA7QUFDRDs7QUFDRCxTQUFPSyxNQUFNLENBQUNDLE9BQVAsQ0FBZXJCLFlBQWYsRUFBNkJELE1BQTdCLEVBQ0w7QUFDQSxHQUFDYSxNQUFELEVBQWlCLENBQUNVLElBQUQsRUFBT0MsV0FBUCxDQUFqQixLQUFnRTtBQUM5RCxVQUFNNUIsUUFBUSxHQUFHNEIsV0FBakI7QUFDQSxRQUFJLENBQUM1QixRQUFRLENBQUNzQixRQUFkLEVBQXdCdEIsUUFBUSxDQUFDc0IsUUFBVCxHQUFvQixFQUFwQjtBQUN4QnRCLElBQUFBLFFBQVEsQ0FBQ0MsTUFBVCxHQUFrQmtCLFNBQVMsQ0FBQ25CLFFBQUQsQ0FBM0I7QUFDQUEsSUFBQUEsUUFBUSxDQUFDd0IsS0FBVCxHQUFpQnhCLFFBQVEsQ0FBQ0MsTUFBVCxHQUFrQkQsUUFBUSxDQUFDQyxNQUFULENBQWdCdUIsS0FBaEIsR0FBd0IsQ0FBMUMsR0FBOEMsQ0FBL0Q7O0FBQ0EsUUFBSSxPQUFPTixPQUFQLEtBQW1CLFFBQW5CLEdBQThCbEIsUUFBUSxDQUFDTSxHQUFULEtBQWlCWSxPQUEvQyxHQUF5RCxDQUFDRCxNQUE5RCxFQUFzRTtBQUNwRUEsTUFBQUEsTUFBTSxHQUFHakIsUUFBVDtBQUNEOztBQUNELFdBQU9pQixNQUFQO0FBQ0QsR0FYSSxFQVlMLElBWkssQ0FBUDtBQWNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNpZ2FyLCB7IFByb2NTdGF0ZSB9IGZyb20gJ25vZGUtc2lnYXInO1xuXG5jb25zdCBzaWdhciA9IG5ldyBTaWdhcigpO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBpZFByb2NJbmZvIHtcbiAgYXJnczogc3RyaW5nW107XG4gIG5hbWU/OiBzdHJpbmc7XG4gIG5pY2U/OiBudW1iZXI7XG4gIHBpZDogbnVtYmVyO1xuICBwcGlkPzogbnVtYmVyO1xuICBwcmlvcml0eT86IG51bWJlcjtcbiAgcHJvY2Vzc29yPzogbnVtYmVyO1xuICBzdGF0ZT86IHN0cmluZztcbiAgdGhyZWFkcz86IG51bWJlcjtcbiAgdHR5PzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBpZHNQcm9jSW5mbyB7XG4gIFtrZXk6IHN0cmluZ106IFBpZFByb2NJbmZvO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByb2NOb2RlIGV4dGVuZHMgUGlkUHJvY0luZm8ge1xuICBjaGlsZHJlbjogUHJvY05vZGVbXTtcbiAgZGVwdGg6IG51bWJlcjtcbiAgcGFyZW50OiBQcm9jTm9kZSB8IG51bGw7XG4gIHBhcmVudHM6IFByb2NOb2RlW107XG59XG5cbmV4cG9ydCB0eXBlIFBTVHJlZSA9IFByb2NOb2RlIHwgbnVsbDtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBhcmVudHMocHJvY05vZGU6IFByb2NOb2RlKTogUHJvY05vZGVbXSB7XG4gIGlmICghcHJvY05vZGUucGFyZW50KSByZXR1cm4gW107XG4gIHJldHVybiBbLi4uZ2V0UGFyZW50cyhwcm9jTm9kZS5wYXJlbnQpLCBwcm9jTm9kZS5wYXJlbnRdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGlkc1Byb2NJbmZvKCk6IFBpZHNQcm9jSW5mbyB7XG4gIHJldHVybiBzaWdhci5wcm9jTGlzdC5yZWR1Y2UoKHBpZHNQcm9jSW5mbzogUGlkc1Byb2NJbmZvLCBwaWQ6IG51bWJlcikgPT4ge1xuICAgIGxldCBhcmdzOiBzdHJpbmdbXSA9IFtdO1xuICAgIHRyeSB7XG4gICAgICBhcmdzID0gc2lnYXIuZ2V0UHJvY0FyZ3MocGlkKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH0gY2F0Y2ggKGVycikge31cbiAgICBsZXQgc3RhdGU6IFByb2NTdGF0ZSB8IHt9ID0ge307XG4gICAgdHJ5IHtcbiAgICAgIHN0YXRlID0gc2lnYXIuZ2V0UHJvY1N0YXRlKHBpZCk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgcGlkc1Byb2NJbmZvW3BpZC50b1N0cmluZygpXSA9IG5ldyBQcm94eShcbiAgICAgIHtcbiAgICAgICAgYXJncyxcbiAgICAgICAgcGlkLFxuICAgICAgICAuLi5zdGF0ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgZ2V0KHRhcmdldDogYW55LCBwcm9wKSB7XG4gICAgICAgICAgaWYgKHByb3AgPT09ICdwYXJlbnRzJykgcmV0dXJuIGdldFBhcmVudHModGFyZ2V0KTtcbiAgICAgICAgICByZXR1cm4gdGFyZ2V0W3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgICByZXR1cm4gcGlkc1Byb2NJbmZvO1xuICB9LCB7fSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBzVHJlZShyb290UGlkPzogbnVtYmVyKTogUFNUcmVlIHtcbiAgY29uc3QgcGlkc1Byb2NJbmZvID0gZ2V0UGlkc1Byb2NJbmZvKCk7XG4gIGZ1bmN0aW9uIGdldFBhcmVudChwcm9jTm9kZTogUHJvY05vZGUpOiBQcm9jTm9kZSB8IG51bGwge1xuICAgIGNvbnN0IHBhcmVudE5vZGUgPSBwcm9jTm9kZS5wcGlkXG4gICAgICA/IChwaWRzUHJvY0luZm9bcHJvY05vZGUucHBpZC50b1N0cmluZygpXSBhcyBQcm9jTm9kZSkgfHwgbnVsbFxuICAgICAgOiBudWxsO1xuICAgIGlmIChwYXJlbnROb2RlKSB7XG4gICAgICBpZiAoIXBhcmVudE5vZGUuY2hpbGRyZW4pIHBhcmVudE5vZGUuY2hpbGRyZW4gPSBbXTtcbiAgICAgIHBhcmVudE5vZGUuY2hpbGRyZW4ucHVzaChwcm9jTm9kZSk7XG4gICAgICBpZiAodHlwZW9mIHBhcmVudE5vZGUuZGVwdGggIT09ICdudW1iZXInKSB7XG4gICAgICAgIHBhcmVudE5vZGUucGFyZW50ID0gZ2V0UGFyZW50KHBhcmVudE5vZGUpO1xuICAgICAgICBwYXJlbnROb2RlLmRlcHRoID0gcGFyZW50Tm9kZS5wYXJlbnQgPyBwYXJlbnROb2RlLnBhcmVudC5kZXB0aCArIDEgOiAwO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGFyZW50Tm9kZTtcbiAgfVxuICByZXR1cm4gT2JqZWN0LmVudHJpZXMocGlkc1Byb2NJbmZvKS5yZWR1Y2UoXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIChwc1RyZWU6IFBTVHJlZSwgW19waWQsIHBpZFByb2NJbmZvXTogW3N0cmluZywgUGlkUHJvY0luZm9dKSA9PiB7XG4gICAgICBjb25zdCBwcm9jTm9kZSA9IHBpZFByb2NJbmZvIGFzIFByb2NOb2RlO1xuICAgICAgaWYgKCFwcm9jTm9kZS5jaGlsZHJlbikgcHJvY05vZGUuY2hpbGRyZW4gPSBbXTtcbiAgICAgIHByb2NOb2RlLnBhcmVudCA9IGdldFBhcmVudChwcm9jTm9kZSk7XG4gICAgICBwcm9jTm9kZS5kZXB0aCA9IHByb2NOb2RlLnBhcmVudCA/IHByb2NOb2RlLnBhcmVudC5kZXB0aCArIDEgOiAwO1xuICAgICAgaWYgKHR5cGVvZiByb290UGlkID09PSAnbnVtYmVyJyA/IHByb2NOb2RlLnBpZCA9PT0gcm9vdFBpZCA6ICFwc1RyZWUpIHtcbiAgICAgICAgcHNUcmVlID0gcHJvY05vZGU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHNUcmVlO1xuICAgIH0sXG4gICAgbnVsbFxuICApO1xufVxuIl19