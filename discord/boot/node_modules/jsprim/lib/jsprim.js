/2/items/1/anyOf/1', schema, '/allOf/2/items/1', 'anyOf', schema.allOf[2].items[1], 1]
    ])
    .concat(expectedCallsChild('anyOf', 0))
    .concat(expectedCallsChild('anyOf', 1))
    .concat(expectedCallsChild('oneOf', 0))
    .concat(expectedCallsChild('oneOf', 1))
    .concat(expectedCallsChild('definitions', 'foo'))
    .concat(expectedCallsChild('definitions', 'bar'))
    .concat(expectedCallsChild('properties', 'foo'))
    .concat(expectedCallsChild('properties', 'bar'))
    .concat(expectedCallsChild('patternProperties', 'foo'))
    .concat(expectedCallsChild('patternProperties', 'bar'))
    .concat(expectedCallsChild('dependencies', 'foo'))
    .concat(expectedCallsChild('dependencies', 'bar'))
};


function expectedCalls(keyword) {
  return [
    [schema[keyword], `/${keyword}`, schema, '', keyword, schema, undefined],
    [schema[keyword].properties[`foo_${keyword}`], `/${keyword}/properties/foo_${keyword}`, schema, `/${keyword}`, 'properties', schema[keyword], `foo_${keyword}`],
    [schema[keyword].properties[`bar_${keyword}`], `/${keyword}/properties/bar_${keyword}`, schema, `/${keyword}`, 'properties', schema[keyword], `bar_${keyword}`],
    [schema[keyword].anyOf[0], `/${keyword}/anyOf/0`, schema, `/${keyword}`, 'anyOf', schema[keyword], 0],
    [schema[keyword].anyOf[1], `/${keyword}/anyOf/1`, schema, `/${keyword}`, 'anyOf', schema[keyword], 1]
  ];
}


function expectedCallsChild(keyword, i) {
  return [
    [schema[keyword][i], `/${keyword}/${i}`, schema, '', keyword, schema, i],
    [schema[keyword][i].properties[`foo_${keyword}_${i}`], `/${keyword}/${i}/properties/foo_${keyword}_${i}`, schema, `/${keyword}/${i}`, 'properties', schema[keyword][i], `foo_${keyword}_${i}`],
    [schema[keyword][i].properties[`bar_${keyword}_${i}`], `/${keyword}/${i}/properties/bar_${keyword}_${i}`, schema, `/${keyword}/${i}`, 'properties', schema[keyword][i], `bar_${keyword}_${i}`],
    [schema[keyword][i].anyOf[0], `/${keyword}/${i}/anyOf/0`, schema, `/${keyword}/${i}`, 'anyOf', schema[keyword][i], 0],
    [schema[keyword][i].anyOf[1], `/${keyword}/${i}/anyOf/1`, schema, `/${keyword}/${i}`, 'anyOf', schema[keyword][i], 1]
  ];
}
'use strict';

var traverse = require('../index');
var assert = require('assert');

describe('json-schema-traverse', function() {
  var calls;

  beforeEach(function() {
    calls = [];
  });

  it('should traverse all keywords containing schemas recursively', function() {
    var schema = require('./fixtures/schema').schema;
    var expectedCalls = require('./fixtures/schema').expectedCalls;

    traverse(schema, {cb: callback});
    assert.deepStrictEqual(calls, expectedCalls);
  });

  describe('Legacy v0.3.1 API', function() {
    it('should traverse all keywords containing schemas recursively', function() {
      var schema = require('./fixtures/schema').schema;
      var expectedCalls = require('./fixtures/schema').expectedCalls;

      traverse(schema, callback);
      assert.deepStrictEqual(calls, expectedCalls);
    });

    it('should work when an options object is provided', function() {
      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex
      var schema = require('./fixtures/schema').schema;
      var expectedCalls = require('./fixtures/schema').expectedCalls;

      traverse(schema, {}, callback);
      assert.deepStrictEqual(calls, expectedCalls);
    });
  });


  describe('allKeys option', function() {
    var schema = {
      someObject: {
        minimum: 1,
        maximum: 2
      }
    };

    it('should traverse objects with allKeys: true option', function() {
      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex
      var expectedCalls = [
        [schema, '', schema, undefined, undefined, undefined, undefined],
        [schema.someObject, '/someObject', schema, '', 'someObject', schema, undefined]
      ];

      traverse(schema, {allKeys: true, cb: callback});
      assert.deepStrictEqual(calls, expectedCalls);
    });


    it('should NOT traverse objects with allKeys: false option', function() {
      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex
      var expectedCalls = [
        [schema, '', schema, undefined, undefined, undefined, undefined]
      ];

      traverse(schema, {allKeys: false, cb: callback});
      assert.deepStrictEqual(calls, expectedCalls);
    });


    it('should NOT traverse objects without allKeys option', function() {
      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex
      var expectedCalls = [
        [schema, '', schema, undefined, undefined, undefined, undefined]
      ];

      traverse(schema, {cb: callback});
      assert.deepStrictEqual(calls, expectedCalls);
    });


    it('should NOT travers objects in standard keywords which value is not a schema', function() {
      var schema2 = {
        const: {foo: 'bar'},
        enum: ['a', 'b'],
        required: ['foo'],
        another: {

        },
        patternProperties: {}, // will not traverse - no properties
        dependencies: true, // will not traverse - invalid
        properties: {
          smaller: {
            type: 'number'
          },
          larger: {
            type: 'number',
            minimum: {$data: '1/smaller'}
          }
        }
      };

      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex
      var expectedCalls = [
        [schema2, '', schema2, undefined, undefined, undefined, undefined],
        [schema2.another, '/another', schema2, '', 'another', schema2, undefined],
        [schema2.properties.smaller, '/properties/smaller', schema2, '', 'properties', schema2, 'smaller'],
        [schema2.properties.larger, '/properties/larger', schema2, '', 'properties', schema2, 'larger'],
      ];

      traverse(schema2, {allKeys: true, cb: callback});
      assert.deepStrictEqual(calls, expectedCalls);
    });
  });

  describe('pre and post', function() {
    var schema = {
      type: 'object',
      properties: {
        name: {type: 'string'},
        age: {type: 'number'}
      }
    };

    it('should traverse schema in pre-order', function() {
      traverse(schema, {cb: {pre}});
      var expectedCalls = [
        ['pre', schema, '', schema, undefined, undefined, undefined, undefined],
        ['pre', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],
        ['pre', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],
      ];
      assert.deepStrictEqual(calls, expectedCalls);
    });

    it('should traverse schema in post-order', function() {
      traverse(schema, {cb: {post}});
      var expectedCalls = [
        ['post', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],
        ['post', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],
        ['post', schema, '', schema, undefined, undefined, undefined, undefined],
      ];
      assert.deepStrictEqual(calls, expectedCalls);
    });

    it('should traverse schema in pre- and post-order at the same time', function() {
      traverse(schema, {cb: {pre, post}});
      var expectedCalls = [
        ['pre', schema, '', schema, undefined, undefined, undefined, undefined],
        ['pre', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],
        ['post', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],
        ['pre', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],
        ['post', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],
        ['post', schema, '', schema, undefined, undefined, undefined, undefined],
      ];
      assert.deepStrictEqual(calls, expectedCalls);
    });
  });

  function callback() {
    calls.push(Array.prototype.slice.call(arguments));
  }

  function pre() {
    calls.push(['pre'].concat(Array.prototype.slice.call(arguments)));
  }

  function post() {
    calls.push(['post'].concat(Array.prototype.slice.call(arguments)));
  }
});
{
	"$schema" : "http://json-schema.org/draft-00/hyper-schema#",
	"id" : "http://json-schema.org/draft-00/hyper-schema#",

	"properties" : {
		"links" : {
			"type" : "array",
			"items" : {"$ref" : "http://json-schema.org/draft-00/links#"},
			"optional" : true
		},
		
		"fragmentResolution" : {
			"type" : "string",
			"optional" : true,
			"default" : "dot-delimited"
		},
		
		"root" : {
			"type" : "boolean",
			"optional" : true,
			"default" : false
		},
		
		"readonly" : {
			"type" : "boolean",
			"optional" : true,
			"default" : false
		},
		
		"pathStart" : {
			"type" : "string",
			"optional" : true,
			"format" : "uri"
		},
		
		"mediaType" : {
			"type" : "string",
			"optional" : true,
			"format" : "media-type"
		},
		
		"alternate" : {
			"type" : "array",
			"items" : {"$ref" : "#"},
			"optional" : true
		}
	},
	
	"links" : [
		{
			"href" : "{$ref}",
			"rel" : "full"
		},
		
		{
			"href" : "{$schema}",
			"rel" : "describedby"
		},
		
		{
			"href" : "{id}",
			"rel" : "self"
		}
	],
	
	"fragmentResolution" : "dot-delimited",
	"extends" : {"$ref" : "http://json-schema.org/draft-00/schema#"}
}{
	"$schema" : "http://json-schema.org/draft-00/hyper-schema#",
	"id" : "http://json-schema.org/draft-00/json-ref#",
	
	"items" : {"$ref" : "#"},
	"additionalProperties" : {"$ref" : "#"},
	
	"links" : [
		{
			"href" : "{$ref}",
			"rel" : "full"
		},
		
		{
			"href" : "{$schema}",
			"rel" : "describedby"
		},
		
		{
			"href" : "{id}",
			"rel" : "self"
		}
	],
	
	"fragmentResolution" : "dot-delimited"
}{
	"$schema" : "http://json-schema.org/draft-00/hyper-schema#",
	"id" : "http://json-schema.org/draft-00/links#",
	"type" : "object",
	
	"properties" : {
		"href" : {
			"type" : "string"
		},
		
		"rel" : {
			"type" : "string"
		},
		
		"method" : {
			"type" : "string",
			"default" : "GET",
			"optional" : true
		},
		
		"enctype" : {
			"type" : "string",
			"requires" : "method",
			"optional" : true
		},
		
		"properties" : {
			"type" : "object",
			"additionalProperties" : {"$ref" : "http://json-schema.org/draft-00/hyper-schema#"},
			"optional" : true
		}
	}
}{
	"$schema" : "http://json-schema.org/draft-00/hyper-schema#",
	"id" : "http://json-schema.org/draft-00/schema#",
	"type" : "object",
	
	"properties" : {
		"type" : {
			"type" : ["string", "array"],
			"items" : {
				"type" : ["string", {"$ref" : "#"}]
			},
			"optional" : true,
			"default" : "any"
		},
		
		"properties" : {
			"type" : "object",
			"additionalProperties" : {"$ref" : "#"},
			"optional" : true,
			"default" : {}
		},
		
		"items" : {
			"type" : [{"$ref" : "#"}, "array"],
			"items" : {"$ref" : "#"},
			"optional" : true,
			"default" : {}
		},
		
		"optional" : {
			"type" : "boolean",
			"optional" : true,
			"default" : false
		},
		
		"additionalProperties" : {
			"type" : [{"$ref" : "#"}, "boolean"],
			"optional" : true,
			"default" : {}
		},
		
		"requires" : {
			"type" : ["string", {"$ref" : "#"}],
			"optional" : true
		},
		
		"minimum" : {
			"type" : "number",
			"optional" : true
		},
		
		"maximum" : {
			"type" : "number",
			"optional" : true
		},
		
		"minimumCanEqual" : {
			"type" : "boolean",
			"optional" : true,
			"requires" : "minimum",
			"default" : true
		},
		
		"maximumCanEqual" : {
			"type" : "boolean",
			"optional" : true,
			"requires" : "maximum",
			"default" : true
		},
		
		"minItems" : {
			"type" : "integer",
			"optional" : true,
			"minimum" : 0,
			"default" : 0
		},
		
		"maxItems" : {
			"type" : "integer",
			"optional" : true,
			"minimum" : 0
		},
		
		"pattern" : {
			"type" : "string",
			"optional" : true,
			"format" : "regex"
		},
		
		"minLength" : {
			"type" : "integer",
			"optional" : true,
			"minimum" : 0,
			"default" : 0
		},
		
		"maxLength" : {
			"type" : "integer",
			"optional" : true
		},
		
		"enum" : {
			"type" : "array",
			"optional" : true,
			"minItems" : 1
		},
		
		"title" : {
			"type" : "string",
			"optional" : true
		},
		
		"description" : {
			"type" : "string",
			"optional" : true
		},
		
		"format" : {
			"type" : "string",
			"optional" : true
		},
		
		"contentEncoding" : {
			"type" : "string",
			"optional" : true
		},
		
		"default" : {
			"type" : "any",
			"optional" : true
		},
		
		"maxDecimal" : {
			"type" : "integer",
			"optional" : true,
			"minimum" : 0
		},
		
		"disallow" : {
			"type" : ["string", "array"],
			"items" : {"type" : "string"},
			"optional" : true
		},
		
		"extends" : {
			"type" : [{"$ref" : "#"}, "array"],
			"items" : {"$ref" : "#"},
			"optional" : true,
			"default" : {}
		}
	},
	
	"optional" : true,
	"default" : {}
}{
	"$schema" : "http://json-schema.org/draft-01/hyper-schema#",
	"id" : "http://json-schema.org/draft-01/hyper-schema#",

	"properties" : {
		"links" : {
			"type" : "array",
			"items" : {"$ref" : "http://json-schema.org/draft-01/links#"},
			"optional" : true
		},
		
		"fragmentResolution" : {
			"type" : "string",
			"optional" : true,
			"default" : "dot-delimited"
		},
		
		"root" : {
			"type" : "boolean",
			"optional" : true,
			"default" : false
		},
		
		"readonly" : {
			"type" : "boolean",
			"optional" : true,
			"default" : false
		},
		
		"pathStart" : {
			"type" : "string",
			"optional" : true,
			"format" : "uri"
		},
		
		"mediaType" : {
			"type" : "string",
			"optional" : true,
			"format" : "media-type"
		},
		
		"alternate" : {
			"type" : "array",
			"items" : {"$ref" : "#"},
			"optional" : true
		}
	},
	
	"links" : [
		{
			"href" : "{$ref}",
			"rel" : "full"
		},
		
		{
			"href" : "{$schema}",
			"rel" : "describedby"
		},
		
		{
			"href" : "{id}",
			"rel" : "self"
		}
	],
	
	"fragmentResolution" : "dot-delimited",
	"extends" : {"$ref" : "http://json-schema.org/draft-01/schema#"}
}{
	"$schema" : "http://json-schema.org/draft-01/hyper-schema#",
	"id" : "http://json-schema.org/draft-01/json-ref#",
	
	"items" : {"$ref" : "#"},
	"additionalProperties" : {"$ref" : "#"},
	
	"links" : [
		{
			"href" : "{$ref}",
			"rel" : "full"
		},
		
		{
			"href" : "{$schema}",
			"rel" : "describedby"
		},
		
		{
			"href" : "{id}",
			"rel" : "self"
		}
	],
	
	"fragmentResolution" : "dot-delimited"
}{
	"$schema" : "http://json-schema.org/draft-01/hyper-schema#",
	"id" : "http://json-schema.org/draft-01/links#",
	"type" : "object",
	
	"properties" : {
		"href" : {
			"type" : "string"
		},
		
		"rel" : {
			"type" : "string"
		},
		
		"method" : {
			"type" : "string",
			"default" : "GET",
			"optional" : true
		},
		
		"enctype" : {
			"type" : "string",
			"requires" : "method",
			"optional" : true
		},
		
		"properties" : {
			"type" : "object",
			"additionalProperties" : {"$ref" : "http://json-schema.org/draft-01/hyper-schema#"},
			"optional" : true
		}
	}
}{
	"$schema" : "http://json-schema.org/draft-01/hyper-schema#",
	"id" : "http://json-schema.org/draft-01/schema#",
	"type" : "object",
	
	"properties" : {
		"type" : {
			"type" : ["string", "array"],
			"items" : {
				"type" : ["string", {"$ref" : "#"}]
			},
			"optional" : true,
			"default" : "any"
		},
		
		"properties" : {
			"type" : "object",
			"additionalProperties" : {"$ref" : "#"},
			"optional" : true,
			"default" : {}
		},
		
		"items" : {
			"type" : [{"$ref" : "#"}, "array"],
			"items" : {"$ref" : "#"},
			"optional" : true,
			"default" : {}
		},
		
		"optional" : {
			"type" : "boolean",
			"optional" : true,
			"default" : false
		},
		
		"additionalProperties" : {
			"type" : [{"$ref" : "#"}, "boolean"],
			"optional" : true,
			"default" : {}
		},
		
		"requires" : {
			"type" : ["string", {"$ref" : "#"}],
			"optional" : true
		},
		
		"minimum" : {
			"type" : "number",
			"optional" : true
		},
		
		"maximum" : {
			"type" : "number",
			"optional" : true
		},
		
		"minimumCanEqual" : {
			"type" : "boolean",
			"optional" : true,
			"requires" : "minimum",
			"default" : true
		},
		
		"maximumCanEqual" : {
			"type" : "boolean",
			"optional" : true,
			"requires" : "maximum",
			"default" : true
		},
		
		"minItems" : {
			"type" : "integer",
			"optional" : true,
			"minimum" : 0,
			"default" : 0
		},
		
		"maxItems" : {
			"type" : "integer",
			"optional" : true,
			"minimum" : 0
		},
		
		"pattern" : {
			"type" : "string",
			"optional" : true,
			"format" : "regex"
		},
		
		"minLength" : {
			"type" : "integer",
			"optional" : true,
			"minimum" : 0,
			"defa