 or `tracesSampler` is defined. If both are defined, `tracesSampleRate` is\n   * ignored.\n   */\n  tracesSampleRate?: number;\n\n  /**\n   * Set of metadata about the SDK that can be internally used to enhance envelopes and events,\n   * and provide additional data about every request.\n   * */\n  _metadata?: SdkMetadata;\n\n  /**\n   * Options which are in beta, or otherwise not guaranteed to be stable.\n   */\n  _experiments?: {\n    [key: string]: any;\n  };\n\n  /**\n   * Function to compute tracing sample rate dynamically and filter unwanted traces.\n   *\n   * Tracing is enabled if either this or `tracesSampleRate` is defined. If both are defined, `tracesSampleRate` is\n   * ignored.\n   *\n   * Will automatically be passed a context object of default and optional custom data. See\n   * {@link Transaction.samplingContext} and {@link Hub.startTransaction}.\n   *\n   * @returns A sample rate between 0 and 1 (0 drops the trace, 1 guarantees it will be sent). Returning `true` is\n   * equivalent to returning 1 and returning `false` is equivalent to returning 0.\n   */\n  tracesSampler?(samplingContext: SamplingContext): number | boolean;\n\n  /**\n   * A callback invoked during event submission, allowing to optionally modify\n   * the event before it is sent to Sentry.\n   *\n   * Note that you must return a valid event from this callback. If you do not\n   * wish to modify the event, simply return it at the end.\n   * Returning null will cause the event to be dropped.\n   *\n   * @param event The error or message event generated by the SDK.\n   * @param hint May contain additional information about the original exception.\n   * @returns A new event that will be sent | null.\n   */\n  beforeSend?(event: Event, hint?: EventHint): PromiseLike<Event | null> | Event | null;\n\n  /**\n   * A callback invoked when adding a breadcrumb, allowing to optionally modify\n   * it before adding it to future events.\n   *\n   * Note that you must return a valid breadcrumb from this callback. If you do\n   * not wish to modify the breadcrumb, simply return it at the end.\n   * Returning null will cause the breadcrumb to be dropped.\n   *\n   * @param breadcrumb The breadcrumb as created by the SDK.\n   * @returns The breadcrumb that will be added | null.\n   */\n  beforeBreadcrumb?(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): Breadcrumb | null;\n}\n"]}/** JSDoc */
export interface Package {
    name: string;
    version: string;
}
//# sourceMappingURL=package.d.ts.map{"version":3,"file":"package.d.ts","sourceRoot":"","sources":["../src/package.ts"],"names":[],"mappings":"AAAA,YAAY;AACZ,MAAM,WAAW,OAAO;IACtB,IAAI,EAAE,MAAM,CAAC;IACb,OAAO,EAAE,MAAM,CAAC;CACjB"}//# sourceMappingURL=package.js.map{"version":3,"file":"package.js","sourceRoot":"","sources":["../src/package.ts"],"names":[],"mappings":"","sourcesContent":["/** JSDoc */\nexport interface Package {\n  name: string;\n  version: string;\n}\n"]}/** Possible SentryRequest types that can be used to make a distinction between Sentry features */
export declare type SentryRequestType = 'event' | 'transaction' | 'session';
/** A generic client request. */
export interface SentryRequest {
    body: string;
    type: SentryRequestType;
    url: string;
}
/** Request data included in an event as sent to Sentry */
export interface Request {
    url?: string;
    method?: string;
    data?: any;
    query_string?: string;
    cookies?: {
        [key: string]: string;
    };
    env?: {
        [key: string]: string;
    };
    headers?: {
        [key: string]: string;
    };
}
//# sourceMappingURL=request.d.ts.map{"version":3,"file":"request.d.ts","sourceRoot":"","sources":["../src/request.ts"],"names":[],"mappings":"AAAA,kGAAkG;AAClG,oBAAY,iBAAiB,GAAG,OAAO,GAAG,aAAa,GAAG,SAAS,CAAC;AAEpE,gCAAgC;AAChC,MAAM,WAAW,aAAa;IAC5B,IAAI,EAAE,MAAM,CAAC;IACb,IAAI,EAAE,iBAAiB,CAAC;IACxB,GAAG,EAAE,MAAM,CAAC;CACb;AAED,0DAA0D;AAC1D,MAAM,WAAW,OAAO;IACtB,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,MAAM,CAAC,EAAE,MAAM,CAAC;IAChB,IAAI,CAAC,EAAE,GAAG,CAAC;IACX,YAAY,CAAC,EAAE,MAAM,CAAC;IACtB,OAAO,CAAC,EAAE;QAAE,CAAC,GAAG,EAAE,MAAM,GAAG,MAAM,CAAA;KAAE,CAAC;IACpC,GAAG,CAAC,EAAE;QAAE,CAAC,GAAG,EAAE,MAAM,GAAG,MAAM,CAAA;KAAE,CAAC;IAChC,OAAO,CAAC,EAAE;QAAE,CAAC,GAAG,EAAE,MAAM,GAAG,MAAM,CAAA;KAAE,CAAC;CACrC"}//# sourceMappingURL=request.js.map{"version":3,"file":"request.js","sourceRoot":"","sources":["../src/request.ts"],"names":[],"mappings":"","sourcesContent":["/** Possible SentryRequest types that can be used to make a distinction between Sentry features */\nexport type SentryRequestType = 'event' | 'transaction' | 'session';\n\n/** A generic client request. */\nexport interface SentryRequest {\n  body: string;\n  type: SentryRequestType;\n  url: string;\n}\n\n/** Request data included in an event as sent to Sentry */\nexport interface Request {\n  url?: string;\n  method?: string;\n  data?: any;\n  query_string?: string;\n  cookies?: { [key: string]: string };\n  env?: { [key: string]: string };\n  headers?: { [key: string]: string };\n}\n"]}import { Event, EventType } from './event';
import { Session } from './session';
import { Status } from './status';
/** JSDoc */
export interface Response {
    status: Status;
    event?: Event | Session;
    type?: EventType;
    reason?: string;
}
//# sourceMappingURL=response.d.ts.map{"version":3,"file":"response.d.ts","sourceRoot":"","sources":["../src/response.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,SAAS,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAElC,YAAY;AACZ,MAAM,WAAW,QAAQ;IACvB,MAAM,EAAE,MAAM,CAAC;IACf,KAAK,CAAC,EAAE,KAAK,GAAG,OAAO,CAAC;IACxB,IAAI,CAAC,EAAE,SAAS,CAAC;IACjB,MAAM,CAAC,EAAE,MAAM,CAAC;CACjB"}//# sourceMappingURL=response.js.map{"version":3,"file":"response.js","sourceRoot":"","sources":["../src/response.ts"],"names":[],"mappings":"","sourcesContent":["import { Event, EventType } from './event';\nimport { Session } from './session';\nimport { Status } from './status';\n\n/** JSDoc */\nexport interface Response {\n  status: Status;\n  event?: Event | Session;\n  type?: EventType;\n  reason?: string;\n}\n"]}/** Runtime Context. */
export interface Runtime {
    name?: string;
    version?: string;
}
//# sourceMappingURL=runtime.d.ts.map{"version":3,"file":"runtime.d.ts","sourceRoot":"","sources":["../src/runtime.ts"],"names":[],"mappings":"AAAA,uBAAuB;AACvB,MAAM,WAAW,OAAO;IACtB,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,OAAO,CAAC,EAAE,MAAM,CAAC;CAClB"}//# sourceMappingURL=runtime.js.map{"version":3,"file":"runtime.js","sourceRoot":"","sources":["../src/runtime.ts"],"names":[],"mappings":"","sourcesContent":["/** Runtime Context. */\nexport interface Runtime {\n  name?: string;\n  version?: string;\n}\n"]}import { Breadcrumb } from './breadcrumb';
import { Context, Contexts } from './context';
import { EventProcessor } from './eventprocessor';
import { Extra, Extras } from './extra';
import { Primitive } from './misc';
import { Session } from './session';
import { Severity } from './severity';
import { Span } from './span';
import { Transaction } from './transaction';
import { User } from './user';
/** JSDocs */
export declare type CaptureContext = Scope | Partial<ScopeContext> | ((scope: Scope) => Scope);
/** JSDocs */
export interface ScopeContext {
    user: User;
    level: Severity;
    extra: Extras;
    contexts: Contexts;
    tags: {
        [key: string]: Primitive;
    };
    fingerprint: string[];
}
/**
 * Holds additional event information. {@link Scope.applyToEvent} will be
 * called by the client before an event will be sent.
 */
export interface Scope {
    /** Add new event processor that will be called after {@link applyToEvent}. */
    addEventProcessor(callback: EventProcessor): this;
    /**
     * Updates user context information for future events.
     *
     * @param user User context object to be set in the current context. Pass `null` to unset the user.
     */
    setUser(user: User | null): this;
    /**
     * Returns the `User` if there is one
     */
    getUser(): User | undefined;
    /**
     * Set an object that will be merged sent as tags data with the event.
     * @param tags Tags context object to merge into current context.
     */
    setTags(tags: {
        [key: string]: Primitive;
    }): this;
    /**
     * Set key:value that will be sent as tags data with the event.
     *
     * Can also be used to unset a tag by passing `undefined`.
     *
     * @param key String key of tag
     * @param value Value of tag
     */
    setTag(key: string, value: Primitive): this;
    /**
     * Set an object that will be merged sent as extra data with the event.
     * @param extras Extras object to merge into current context.
     */
    setExtras(extras: Extras): this;
    /**
     * Set key:value that will be sent as extra data with the event.
     * @param key String of extra
     * @param extra Any kind of data. This data will be normalized.
     */
    setExtra(key: string, extra: Extra): this;
    /**
     * Sets the fingerprint on the scope to send with the events.
     * @param fingerprint string[] to group events in Sentry.
     */
    setFingerprint(fingerprint: string[]): this;
    /**
     * Sets the level on the scope for future events.
     * @param level string {@link Sev