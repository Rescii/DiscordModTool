   // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            var requestType_1 = nodeHttpModule.IncomingMessage;
            var request = domain.members.find(function (member) { return isInstanceOf(member, requestType_1); });
            if (request) {
                defaultSamplingContext.request = extractNodeRequestData(request);
            }
        }
    }
    // we must be in browser-js (or some derivative thereof)
    else {
        // we use `getGlobalObject()` rather than `window` since service workers also have a `location` property on `self`
        var globalObject = getGlobalObject();
        if ('location' in globalObject) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any
            defaultSamplingContext.location = __assign({}, globalObject.location);
        }
    }
    return defaultSamplingContext;
}
/**
 * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).
 */
function isValidSampleRate(rate) {
    // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {
        logger.warn("[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got " + JSON.stringify(rate) + " of type " + JSON.stringify(typeof rate) + ".");
        return false;
    }
    // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false
    if (rate < 0 || rate > 1) {
        logger.warn("[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got " + rate + ".");
        return false;
    }
    return true;
}
/**
 * Creates a new transaction and adds a sampling decision if it doesn't yet have one.
 *
 * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if
 * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an
 * "extension method."
 *
 * @param this: The Hub starting the transaction
 * @param transactionContext: Data used to configure the transaction
 * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)
 *
 * @returns The new transaction
 *
 * @see {@link Hub.startTransaction}
 */
function _startTransaction(transactionContext, customSamplingContext) {
    var transaction = new Transaction(transactionContext, this);
    return sample(this, transaction, __assign(__assign({}, getDefaultSamplingContext(transactionContext)), customSamplingContext));
}
/**
 * Create new idle transaction.
 */
export function startIdleTransaction(hub, transactionContext, idleTimeout, onScope) {
    var transaction = new IdleTransaction(transactionContext, hub, idleTimeout, onScope);
    return sample(hub, transaction, getDefaultSamplingContext(transactionContext));
}
/**
 * @private
 */
export function _addTracingExtensions() {
    var carrier = getMainCarrier();
    if (carrier.__SENTRY__) {
        carrier.__SENTRY__.extensions = carrier.__SENTRY__.exte