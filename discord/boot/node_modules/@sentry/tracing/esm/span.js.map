AE/C,kEAAkE;gBAClE,sEAAsE;gBACtE,+DAA+D;gBAC/D,4DAA4D;gBAC5D,IAAI,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,OAAO,IAAI,SAAS,KAAK,SAAS,EAAE;oBAC7D,QAAQ,CAAC,MAAM,CAAC,CAAC;oBACjB,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC;iBAC1B;aACF;SACF;IACH,CAAC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Metric, ReportHandler } from '../types';\n\nexport const bindReporter = (\n  callback: ReportHandler,\n  metric: Metric,\n  po: PerformanceObserver | undefined,\n  observeAllUpdates?: boolean,\n): (() => void) => {\n  let prevValue: number;\n  return () => {\n    if (po && metric.isFinal) {\n      po.disconnect();\n    }\n    if (metric.value >= 0) {\n      if (observeAllUpdates || metric.isFinal || document.visibilityState === 'hidden') {\n        metric.delta = metric.value - (prevValue || 0);\n\n        // Report the metric if there's a non-zero delta, if the metric is\n        // final, or if no previous value exists (which can happen in the case\n        // of the document becoming hidden when the metric value is 0).\n        // See: https://github.com/GoogleChrome/web-vitals/issues/14\n        if (metric.delta || metric.isFinal || prevValue === undefined) {\n          callback(metric);\n          prevValue = metric.value;\n        }\n      }\n    }\n  };\n};\n"]}/**
 * Performantly generate a unique, 27-char string by combining the current
 * timestamp with a 13-digit random number.
 * @return {string}
 */
export declare const generateUniqueID: () => string;
//# sourceMappingURL=generateUniqueID.d.ts.map{"version":3,"file":"generateUniqueID.d.ts","sourceRoot":"","sources":["../../../../src/browser/web-vitals/lib/generateUniqueID.ts"],"names":[],"mappings":"AAgBA;;;;GAIG;AACH,eAAO,MAAM,gBAAgB,cAE5B,CAAC"}/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Performantly generate a unique, 27-char string by combining the current
 * timestamp with a 13-digit random number.
 * @return {string}
 */
export var generateUniqueID = function () {
    return Date.now() + "-" + (Math.floor(Math.random() * (9e12 - 1)) + 1e12);
};
//# sourceMappingURL=generateUniqueID.js.map{"version":3,"file":"generateUniqueID.js","sourceRoot":"","sources":["../../../../src/browser/web-vitals/lib/generateUniqueID.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAEH;;;;GAIG;AACH,MAAM,CAAC,IAAM,gBAAgB,GAAG;IAC9B,OAAU,IAAI,CAAC,GAAG,EAAE,UAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAE,CAAC;AAC1E,CAAC,CAAC","sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Performantly generate a unique, 27-char string by combining the current\n * timestamp with a 13-digit random number.\n * @return {string}\n */\nexport const generateUniqueID = (): string => {\n  return `${Date.now()}-${Math.floor(Math.random() * (9e12 - 1)) + 1e12}`;\n};\n"]}declare type HiddenType = {
    readonly timeStamp: number;
};
export declare const getFirstHidden: () => HiddenType;
export {};
//# sourceMappingURL=getFirstHidden.d.ts.map{"version":3,"file":"getFirstHidden.d.ts","sourceRoot":"","sources":["../../../../src/browser/web-vitals/lib/getFirstHidden.ts"],"names":[],"mappings":"AAoBA,aAAK,UAAU,GAAG;IAChB,QAAQ,CAAC,SAAS,EAAE,MAAM,CAAC;CAC5B,CAAC;AAEF,eAAO,MAAM,cAAc,kBAiB1B,CAAC"}/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { onHidden } from './onHidden';
var firstHiddenTime;
export var getFirstHidden = function () {
    if (firstHiddenTime === undefined) {
        // If the document is hidden when this code runs, assume it was hidden
        // since navigation start. This isn't a perfect heuristic, but it's the
        // best we can do until an API is available to support querying past
        // visibilityState.
        firstHiddenTime = document.visibilityState === 'hidden' ? 0 : Infinity;
        // Update the time if/when the document becomes hidden.
        onHidden(function (_a) {
            var timeStamp = _a.timeStamp;
            return (firstHiddenTime = timeStamp);
        }, true);
    }
    return {
        get timeStamp() {
            return firstHiddenTime;
        },
    };
};
//# sourceMappingURL=getFirstHidden.js.map{"version":3,"file":"getFirstHidden.js","sourceRoot":"","sources":["../../../../src/browser/web-vitals/lib/getFirstHidden.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAEH,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAEtC,IAAI,eAAuB,CAAC;AAM5B,MAAM,CAAC,IAAM,cAAc,GAAG;IAC5B,IAAI,eAAe,KAAK,SAAS,EAAE;QACjC,sEAAsE;QACtE,uEAAuE;QACvE,oEAAoE;QACpE,mBAAmB;QACnB,eAAe,GAAG,QAAQ,CAAC,eAAe,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;QAEvE,uDAAuD;QACvD,QAAQ,CAAC,UAAC,EAAa;gBAAX,wBAAS;YAAO,OAAA,CAAC,eAAe,GAAG,SAAS,CAAC;QAA7B,CAA6B,EAAE,IAAI,CAAC,CAAC;KAClE;IAED,OAAO;QACL,IAAI,SAAS;YACX,OAAO,eAAe,CAAC;QACzB,CAAC;KACF,CAAC;AACJ,CAAC,CAAC","sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { onHidden } from './onHidden';\n\nlet firstHiddenTime: number;\n\ntype HiddenType = {\n  readonly timeStamp: number;\n};\n\nexport const getFirstHidden = (): HiddenType => {\n  if (firstHiddenTime === undefined) {\n    // If the document is hidden when this code runs, assume it was hidden\n    // since navigation start. This isn't a perfect heuristic, but it's the\n    // best we can do until an API is available to support querying past\n    // visibilityState.\n    firstHiddenTime = document.visibilityState === 'hidden' ? 0 : Infinity;\n\n    // Update the time if/when the document becomes hidden.\n    onHidden(({ timeStamp }) => (firstHiddenTime = timeStamp), true);\n  }\n\n  return {\n    get timeStamp() {\n      return firstHiddenTime;\n    },\n  };\n};\n"]}import { Metric } from '../types';
export declare const initMetric: (name: "CLS" | "FCP" | "FID" | "LCP" | "TTFB", value?: number) => Metric;
//# sourceMappingURL=initMetric.d.ts.map{"version":3,"file":"initMetric.d.ts","sourceRoot":"","sources":["../../../../src/browser/web-vitals/lib/initMetric.ts"],"names":[],"mappings":"AAgBA,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAGlC,eAAO,MAAM,UAAU,0EAStB,CAAC"}/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { generateUniqueID } from './generateUniqueID';
export var initMetric = function (name, value) {
    if (value === void 0) { value = -1; }
    return {
        name: name,
        value: value,
        delta: 0,
        entries: [],
        id: generateUniqueID(),
        isFinal: false,
    };
};
//# sourceMappingURL=initMetric.js.map{"version":3,"file":"initMetric.js","sourceRoot":"","sources":["../../../../src/browser/web-vitals/lib/initMetric.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAGH,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAEtD,MAAM,CAAC,IAAM,UAAU,GAAG,UAAC,IAAoB,EAAE,KAAU;IAAV,sBAAA,EAAA,SAAS,CAAC;IACzD,OAAO;QACL,IAAI,MAAA;QACJ,KAAK,OAAA;QACL,KAAK,EAAE,CAAC;QACR,OAAO,EAAE,EAAE;QACX,EAAE,EAAE,gBAAgB,EAAE;QACtB,OAAO,EAAE,KAAK;KACf,CAAC;AACJ,CAAC,CAAC","sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Metric } from '../types';\nimport { generateUniqueID } from './generateUniqueID';\n\nexport const initMetric = (name: Metric['name'], value = -1): Metric => {\n  return {\n    name,\n    value,\n    delta: 0,\n    entries: [],\n    id: generateUniqueID(),\n    isFinal: false,\n  };\n};\n"]}export interface PerformanceEntryHandler {
    (entry: PerformanceEntry): void;
}
/**
 * Takes a performance entry type and a callback function, and creates a
 * `PerformanceObserver` instance that will observe the specified entry type
 * with buffering enabled and call the callback _for each entry_.
 *
 * This function also feature-detects entry support and wraps the logic in a
 * try/catch to avoid errors in unsupporting browsers.
 */
export declare const observe: (type: string, callback: PerformanceEntryHandler) => PerformanceObserver | undefined;
//# sourceMappingURL=observe.d.ts.map{"version":3,"file":"observe.d.ts","sourceRoot":"","sources":["../../../../src/browser/web-vitals/lib/observe.ts"],"names":[],"mappings":"AAgBA,MAAM,WAAW,uBAAuB;IACtC,CAAC,KAAK,EAAE,gBAAgB,GAAG,IAAI,CAAC;CACjC;AAED;;;;;;;GAOG;AACH,eAAO,MAAM,OAAO,sFAYnB,CAAC"}/*
 * Copyright 20