AG,QAAQ,CAAC,CAAC,CAAE,KAAK,CAAC,QAAQ,CAAwB,CAAC,CAAC,CAAE,KAAK,CAAI,KAAK,QAAK,CAAwB,CAAC;IAC9G,IAAM,KAAK,GAAG,KAAK,CAAI,KAAK,UAAO,CAAuB,CAAC;IAC3D,IAAI,CAAC,KAAK,IAAI,CAAC,GAAG,EAAE;QAClB,OAAO;KACR;IACD,WAAW,CAAC,WAAW,EAAE;QACvB,EAAE,EAAE,SAAS;QACb,WAAW,EAAE,KAAK;QAClB,cAAc,EAAE,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC;QAC3C,YAAY,EAAE,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC;KACxC,CAAC,CAAC;AACL,CAAC;AAED,gDAAgD;AAChD,SAAS,UAAU,CAAC,WAAwB,EAAE,KAA0B,EAAE,UAAkB;IAC1F,WAAW,CAAC,WAAW,EAAE;QACvB,EAAE,EAAE,SAAS;QACb,WAAW,EAAE,SAAS;QACtB,cAAc,EAAE,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,YAAsB,CAAC;QAClE,YAAY,EAAE,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,WAAqB,CAAC;KAChE,CAAC,CAAC;IAEH,WAAW,CAAC,WAAW,EAAE;QACvB,EAAE,EAAE,SAAS;QACb,WAAW,EAAE,UAAU;QACvB,cAAc,EAAE,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,aAAuB,CAAC;QACnE,YAAY,EAAE,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,WAAqB,CAAC;KAChE,CAAC,CAAC;AACL,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,WAAW,CAAC,WAAwB,EAAE,EAAuC;IAArC,IAAA,kCAAc,EAAE,oCAAM;IAC5E,IAAI,cAAc,IAAI,WAAW,CAAC,cAAc,GAAG,cAAc,EAAE;QACjE,WAAW,CAAC,cAAc,GAAG,cAAc,CAAC;KAC7C;IAED,OAAO,WAAW,CAAC,UAAU,YAC3B,cAAc,gBAAA,IACX,GAAG,EACN,CAAC;AACL,CAAC;AAED;;GAEG;AACH,SAAS,kBAAkB,CAAC,KAAU;IACpC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC;AACtD,CAAC","sourcesContent":["/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Measurements, SpanContext } from '@sentry/types';\nimport { browserPerformanceTimeOrigin, getGlobalObject, logger } from '@sentry/utils';\n\nimport { Span } from '../span';\nimport { Transaction } from '../transaction';\nimport { msToSec } from '../utils';\nimport { getCLS } from './web-vitals/getCLS';\nimport { getFID } from './web-vitals/getFID';\nimport { getLCP } from './web-vitals/getLCP';\nimport { getTTFB } from './web-vitals/getTTFB';\nimport { getFirstHidden } from './web-vitals/lib/getFirstHidden';\nimport { NavigatorDeviceMemory, NavigatorNetworkInformation } from './web-vitals/types';\n\nconst global = getGlobalObject<Window>();\n\n/** Class tracking metrics  */\nexport class MetricsInstrumentation {\n  private _measurements: Measurements = {};\n\n  private _performanceCursor: number = 0;\n\n  public constructor() {\n    if (global && global.performance) {\n      if (global.performance.mark) {\n        global.performance.mark('sentry-tracing-init');\n      }\n\n      this._trackCLS();\n      this._trackLCP();\n      this._trackFID();\n      this._trackTTFB();\n    }\n  }\n\n  /** Add performance related spans to a transaction */\n  public addPerformanceEntries(transaction: Transaction): void {\n    if (!global || !global.performance || !global.performance.getEntries || !browserPerformanceTimeOrigin) {\n      // Gatekeeper if performance API not available\n      return;\n    }\n\n    logger.log('[Tracing] Adding & adjusting spans using Performance API');\n\n    const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n    let entryScriptSrc: string | undefined;\n\n    if (global.do