and a callback function, and creates a\n * `PerformanceObserver` instance that will observe the specified entry type\n * with buffering enabled and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nexport const observe = (type: string, callback: PerformanceEntryHandler): PerformanceObserver | undefined => {\n  try {\n    if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n      const po: PerformanceObserver = new PerformanceObserver(l => l.getEntries().map(callback));\n\n      po.observe({ type, buffered: true });\n      return po;\n    }\n  } catch (e) {\n    // Do nothing.\n  }\n  return;\n};\n"]}export interface OnHiddenCallback {
    ({ timeStamp, isUnloading }: {
        timeStamp: number;
        isUnloading: boolean;
    }): void;
}
export declare const onHidden: (cb: OnHiddenCallback, once?: boolean) => void;
//# sourceMappingURL=onHidden.d.ts.map{"version":3,"file":"onHidden.d.ts","sourceRoot":"","sources":["../../../../src/browser/web-vitals/lib/onHidden.ts"],"names":[],"mappings":"AAgBA,MAAM,WAAW,gBAAgB;IAE/B,CAAC,EAAE,SAAS,EAAE,WAAW,EAAE,EAAE;QAAE,SAAS,EAAE,MAAM,CAAC;QAAC,WAAW,EAAE,OAAO,CAAA;KAAE,GAAG,IAAI,CAAC;CACjF;AAkBD,eAAO,MAAM,QAAQ,gDAepB,CAAC"}/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var isUnloading = false;
var listenersAdded = false;
var onPageHide = function (event) {
    isUnloading = !event.persisted;
};
var addListeners = function () {
    addEventListener('pagehide', onPageHide);
    // `beforeunload` is needed to fix this bug:
    // https://bugs.chromium.org/p/chromium/issues/detail?id=987409
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    addEventListener('beforeunload', function () { });
};
export var onHidden = function (cb, once) {
    if (once === void 0) { once = false; }
    if (!listenersAdded) {
        addListeners();
        listenersAdded = true;
    }
    addEventListener('visibilitychange', function (_a) {
        var timeStamp = _a.timeStamp;
        if (document.visibilityState === 'hidden') {
            cb({ timeStamp: timeStamp, isUnloading: isUnloading });
        }
    }, { capture: true, once: once });
};
//# sourceMappingURL=onHidden.js.map{"version":3,"file":"onHidden.js","sourceRoot":"","sources":["../../../../src/browser/web-vitals/lib/onHidden.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAOH,IAAI,WAAW,GAAG,KAAK,CAAC;AACxB,IAAI,cAAc,GAAG,KAAK,CAAC;AAE3B,IAAM,UAAU,GAAG,UAAC,KAA0B;IAC5C,WAAW,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC;AACjC,CAAC,CAAC;AAEF,IAAM,YAAY,GAAG;IACnB,gBAAgB,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;IAEzC,4CAA4C;IAC5C,+DAA+D;IAC/D,gEAAgE;IAChE,gBAAgB,CAAC,cAAc,EAAE,cAAO,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,QAAQ,GAAG,UAAC,EAAoB,EAAE,IAAY;IAAZ,qBAAA,EAAA,YAAY;IACzD,IAAI,CAAC,cAAc,EAAE;QACnB,YAAY,EAAE,CAAC;QACf,cAAc,GAAG,IAAI,CAAC;KACvB;IAED,gBAAgB,CACd,kBAAkB,EAClB,UAAC,EAAa;YAAX,wBAAS;QACV,IAAI,QAAQ,CAAC,eAAe,KAAK,QAAQ,EAAE;YACzC,EAAE,CAAC,EAAE,SAAS,WAAA,EAAE,WAAW,aAAA,E