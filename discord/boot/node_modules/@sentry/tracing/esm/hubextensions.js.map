;
    constructor(_options?: Partial<BrowserTracingOptions>);
    /**
     * @inheritDoc
     */
    setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void;
    /** Create routing idle transaction. */
    private _createRouteTransaction;
}
/**
 * Gets transaction context from a sentry-trace meta.
 *
 * @returns Transaction context data from the header or undefined if there's no header or the header is malformed
 */
export declare function getHeaderContext(): Partial<TransactionContext> | undefined;
/** Returns the value of a meta tag */
export declare function getMetaContent(metaName: string): string | null;
//# sourceMappingURL=browsertracing.d.ts.map{"version":3,"file":"browsertracing.d.ts","sourceRoot":"","sources":["../../src/browser/browsertracing.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,aAAa,CAAC;AAClC,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,WAAW,EAAE,kBAAkB,EAAE,MAAM,eAAe,CAAC;AAS7F,OAAO,EAGL,6BAA6B,EAC9B,MAAM,WAAW,CAAC;AAGnB,eAAO,MAAM,wCAAwC,MAAM,CAAC;AAE5D,8CAA8C;AAC9C,MAAM,WAAW,qBAAsB,SAAQ,6BAA6B;IAC1E;;;;;;OAMG;IACH,WAAW,EAAE,MAAM,CAAC;IAEpB;;;;OAIG;IACH,gCAAgC,EAAE,OAAO,CAAC;IAE1C;;;;OAIG;IACH,0BAA0B,EAAE,OAAO,CAAC;IAEpC;;;;;;OAMG;IACH,sBAAsB,EAAE,MAAM,CAAC;IAE/B;;;;;;OAMG;IACH,0BAA0B,EAAE,OAAO,CAAC;IAEpC;;;;;;;;;OASG;IACH,cAAc,CAAC,CAAC,OAAO,EAAE,kBAAkB,GAAG,kBAAkB,GAAG,SAAS,CAAC;IAE7E;;;OAGG;IACH,sBAAsB,CAAC,CAAC,SAAS,WAAW,EAC1C,gBAAgB,EAAE,CAAC,OAAO,EAAE,kBAAkB,KAAK,CAAC,GAAG,SAAS,EAChE,0BAA0B,CAAC,EAAE,OAAO,EACpC,gCAAgC,CAAC,EAAE,OAAO,GACzC,IAAI,CAAC;CACT;AAYD;;;;;;GAMG;AACH,qBAAa,cAAe,YAAW,WAAW;IAChD;;OAEG;IACH,OAAc,EAAE,EAAE,MAAM,CAAoB;IAE5C,0CAA0C;IACnC,OAAO,EAAE,qBAAqB,CAAC;IAEtC;;OAEG;IACI,IAAI,EAAE,MAAM,CAAqB;IAExC,OAAO,CAAC,cAAc,CAAC,CAAY;IAEnC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAwD;IAEjF,OAAO,CAAC,QAAQ,CAAC,mBAAmB,CAAkB;gBAEnC,QAAQ,CAAC,EAAE,OAAO,CAAC,qBAAqB,CAAC;IAqB5D;;OAEG;IACI,SAAS,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE,cAAc,KAAK,IAAI,EAAE,aAAa,EAAE,MAAM,GAAG,GAAG,IAAI;IAqCvF,uCAAuC;IACvC,OAAO,CAAC,uBAAuB;CAoChC;AAED;;;;GAIG;AACH,wBAAgB,gBAAgB,IAAI,OAAO,CAAC,kBAAkB,CAAC,GAAG,SAAS,CAO1E;AAED,sCAAsC;AACtC,wBAAgB,cAAc,CAAC,QAAQ,EAAE,MAAM,GAAG,MAAM,GAAG,IAAI,CAG9D"}import { __assign } from "tslib";
import { logger } from '@sentry/utils';
import { startIdleTransaction } from '../hubextensions';
import { DEFAULT_IDLE_TIMEOUT } from '../idletransaction';
import { SpanStatus } from '../spanstatus';
import { extractTraceparentData, secToMs } from '../utils';
import { registerBackgroundTabDetection } from './backgroundtab';
import { MetricsInstrumentation } from './metrics';
import { defaultRequestInstrumentationOptions, registerRequestInstrumentation, } from './request';
import { defaultRoutingInstrumentation } from './router';
export var DEFAULT_MAX_TRANSACTION_DURATION_SECONDS = 600;
var DEFAULT_BROWSER_TRACING_OPTIONS = __assign({ idleTimeout: DEFAULT_IDLE_TIMEOUT, markBackgroundTransactions: true, maxTransactionDuration: DEFAULT_MAX_TRANSACTION_DURATION_SECONDS, routingInstrumentation: defaultRoutingInstrumentation, startTransactionOnLocationChange: true, startTransactionOnPageLoad: true }, defaultRequestInstrumentationOptions);
/**
 * The Browser Tracing integration automatically instruments browser pageload/navigation
 * actions as transactions, and captures requests, metrics and errors as spans.
 *
 * The integration can be configured with a variety of options, and can be extended to use
 * any routing library. This integration uses {@see IdleTransaction} to create transactions.
 */
var BrowserTracing = /** @class */ (function () {
    function BrowserTracing(_options) {
        /**
         * @inheritDoc
         */
        this.name = BrowserTracing.id;
        this._metrics = new MetricsInstrumentation();
        this._emitOptionsWarning = false;
        var tracingOrigins = defaultRequestInstrumentationOptions.tracingOrigins;
        // NOTE: Logger doesn't work in constructors, as it's initialized after integrations instances
        if (_options &&
            _options.tracingOrigins &&
            Array.isArray(_options.tracingOrigins) &&
            _options.tracingOrigins.length !== 0) {
            tracingOrigins = _options.tracingOrigins;
        }
        else {
            this._emitOptionsWarning = true;
        }
        this.options = __assign(__assign(__assign({}, DEFAULT_BROWSER_TRACING_OPTIONS), _options), { tracingOrigins: tracingOrigins });
    }
    /**
     * @inheritDoc
     */
    BrowserTracing.prototype.setupOnce = function (_, getCurrentHub) {
        var _this = this;
        this._getCurrentHub = getCurrentHub;
        if (this._emitOptionsWarning) {
            logger.warn('[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.');
            logger.warn("[Tracing] We added a reasonable default for you: " + defaultRequestInstrumentationOptions.tracingOrigins);
        }
        // eslint-disable-next-line @typescript-eslint/unbound-method
        var _a = this.options, routingInstrumentation = _a.routingInstrumentation, startTransactionOnLocationChange = _a.startTransactionOnLocationChange, startTransactionOnPageLoad = _a.startTransactionOnPageLoad, markBackgroundTransactions = _a.markBackgroundTransactions, traceFetch = _a.traceFetch, traceXHR = _a.traceXHR, tracingOrigins = _a.tracingOrigins, shouldCreateSpanForRequest = _a.shouldCreateSpanForRequest;
        routingInstrumentation(function (context) { return _this._createRouteTransaction(context); }, startTransactionOnPageLoad, startTransactionOnLocationChange);
        if (markBackgroundTransactions) {
            registerBackgroundTabDetection();
        }
        registerRequestInstrumentation({ traceFetch: traceFetch, traceXHR: traceXHR, tracingOrigins: tracingOrigins, shouldCreateSpanForRequest: shouldCreateSpanForRequest });
    };
    /** Create routing idle transaction. */
    BrowserTracing.prototype._createRouteTransaction = function (context) {
        var _this = this;
        if (!this._getCurrentHub) {
            logger.warn("[Tracing] Did not create " + context.op + " transaction because _getCurrentHub is invalid.");
            return undefined;
        }
        // eslint-disable-next-line @typescript-eslint/unbound-method
        var _a = this.options, beforeNavigate = _a.beforeNavigate, idleTimeout = _a.idleTimeout, maxTransactionDuration = _a.maxTransactionDuration;
        var parentContextFromHeader = context.op === 'pageload' ? getHeaderContext() : undefined;
        var expandedContext = __assign(__assign(__assign({}, context), parentContextFromHeader), { trimEnd: true });
        var modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;
        // For backwards compatibility reasons, beforeNavigate can return undefined to "drop" the transaction (prevent it
        // from being sent to Sentry).
        var finalContext = modifiedContext === undefined ? __assign(__assign({}, expandedContext), { sampled: false }) : modifiedContext;
        if (finalContext.sampled === false) {
            logger.log("[Tracing] Will not send " + finalContext.op + " transaction because of beforeNavigate.");
        }
        var hub = this._getCurrentHub();
        var idleTransaction = startIdleTransaction(hub, finalContext, idleTimeout, true);
        logger.log("[Tracing] Starting " + finalContext.op + " transaction on scope");
        idleTransaction.registerBeforeFinishCallback(function (transaction, endTimestamp) {
            _this._metrics.addPerformanceEntries(transaction);
            adjustTransactionDuration(secToMs(maxTransactionDuration), transaction, endTimestamp);
        });
        return idleTransaction;
    };
    /**
     * @inheritDoc
     */
    BrowserTracing.id = 'BrowserTracing';
    return BrowserTracing;
}());
export { BrowserTracing };
/**
 * Gets transaction context from a sentry-trace meta.
 *
 * @returns Transaction context data from the header or undefined if there's no header or the header is malformed
 */
export function getHeaderContext() {
    var header = getMetaContent('sentry-trace');
    if (header) {
        return extractTraceparentData(header);
    }
    return undefined;
}
/** Returns the value of a meta tag */
export function getMetaContent(metaName) {
    var el = document.querySelector("meta[name=" + metaName + "]");
    return el ? el.getAttribute('content') : null;
}
/** Adjusts transaction value based on max transaction duration */
function adjustTransactionDuration(maxDuration, transaction, endTimestamp) {
    var diff = endTimestamp - transaction.startTimestamp;
    var isOutdatedTransaction = endTimestamp && (diff > maxDuration || diff < 0);
    if (isOutdatedTransaction) {
        transaction.setStatus(SpanStatus.DeadlineExceeded);
        transaction.setTag('maxTransactionDurationExceeded', 'true');
    }
}
//# sourceMappingURL=browsertracing.js.map{"version":3,"file":"browsertracing.js","sourceRoot":"","sources":["../../src/browser/browsertracing.ts"],"names":[],"mappings":"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","sourcesContent":["import { Hub } from '@sentry/hub';\nimport { EventProcessor, Integration, Transaction, TransactionContext } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { startIdleTransaction } from '../hubextensions';\nimport { DEFAULT_IDLE_TIMEOUT, IdleTransaction } from '../idletransaction';\nimport { SpanStatus } from '../spanstatus';\nimport { extractTraceparentData, secToMs } from '../utils';\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport { MetricsInstrumentation } from './metrics';\nimport {\n  defaultRequestInstrumentationOptions,\n  registerRequestInstrumentation,\n  RequestInstrumentationOptions,\n} from './request';\nimport { defaultRoutingInstrumentation } from './router';\n\nexport const DEFAULT_MAX_TRANSACTION_DURATION_SECONDS = 600;\n\n/** Options for Browser Tracing integration */\nexport interface BrowserTracingOptions extends RequestInstrumentationOptions {\n  /**\n   * The time to wait in ms until the transaction will be finished. The transaction will use the end timestamp of\n   * the last finished span as the endtime for the transaction.\n   * Time is in ms.\n   *\n   * Default: 1000\n   */\n  idleTimeout: number;\n\n  /**\n   * Flag to enable/disable creation of `navigation` transaction on history changes.\n   *\n   * Default: true\n   */\n  startTransactionOnLocationChange: boolean;\n\n  /**\n   * Flag to enable/disable creation of `pageload` transaction on first pageload.\n   *\n   * Default: true\n   */\n  startTransactionOnPageLoad: boolean;\n\n  /**\n   * The maximum duration of a transaction before it will be marked as \"deadline_exceeded\".\n   * If you never want to mark a transaction set it to 0.\n   * Time is in seconds.\n   *\n   * Default: 600\n   */\n  maxTransactionDuration: number;\n\n  /**\n   * Flag Transactions where tabs moved to background with \"cancelled\". Browser background tab timing is\n   * not suited towards doing precise measurements of operations. By default, we recommend that this option\n   * be enabled as background transactions can mess up your statistics in nondeterministic ways.\n   *\n   * Default: true\n   */\n  markBackgroundTransactions: boolean;\n\n  /**\n   * beforeNavigate is called before a pageload/navigation transaction is created and allows users to modify transaction\n   * context data, or drop the transaction entirely (by setting `sampled = false` in the context).\n   *\n   * Note: For leg