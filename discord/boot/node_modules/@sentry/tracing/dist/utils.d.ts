he dice roll
    transaction.initSpanRecorder((_a = options._experiments) === null || _a === void 0 ? void 0 : _a.maxSpans);
    utils_1.logger.log("[Tracing] starting " + transaction.op + " transaction - " + transaction.name);
    return transaction;
}
/**
 * Gets the correct context to pass to the tracesSampler, based on the environment (i.e., which SDK is being used)
 *
 * @returns The default sample context
 */
function getDefaultSamplingContext(transactionContext) {
    // promote parent sampling decision (if any) for easy access
    var parentSampled = transactionContext.parentSampled;
    var defaultSamplingContext = { transactionContext: transactionContext, parentSampled: parentSampled };
    if (utils_1.isNodeEnv()) {
        var domain = hub_1.getActiveDomain();
        if (domain) {
            // for all node servers that we currently support, we store the incoming request object (which is an instance of
            // http.IncomingMessage) on the domain
            // the domain members are stored as an array, so our only way to find the request is to iterate through the array
            // and compare types
            var nodeHttpModule = utils_1.dynamicRequire(module, 'http');
    