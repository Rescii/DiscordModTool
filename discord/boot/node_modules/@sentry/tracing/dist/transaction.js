rt interface ReportHandler {\n  (metric: Metric): void;\n}\n\n// http://wicg.github.io/netinfo/#navigatornetworkinformation-interface\nexport interface NavigatorNetworkInformation {\n  readonly connection?: NetworkInformation;\n}\n\n// http://wicg.github.io/netinfo/#connection-types\ntype ConnectionType = 'bluetooth' | 'cellular' | 'ethernet' | 'mixed' | 'none' | 'other' | 'unknown' | 'wifi' | 'wimax';\n\n// http://wicg.github.io/netinfo/#effectiveconnectiontype-enum\ntype EffectiveConnectionType = '2g' | '3g' | '4g' | 'slow-2g';\n\n// http://wicg.github.io/netinfo/#dom-megabit\ntype Megabit = number;\n// http://wicg.github.io/netinfo/#dom-millisecond\ntype Millisecond = number;\n\n// http://wicg.github.io/netinfo/#networkinformation-interface\ninterface NetworkInformation extends EventTarget {\n  // http://wicg.github.io/netinfo/#type-attribute\n  readonly type?: ConnectionType;\n  // http://wicg.github.io/netinfo/#effectivetype-attribute\n  readonly effectiveType?: EffectiveConnectionType;\n  // http://wicg.github.io/netinfo/#downlinkmax-attribute\n  readonly downlinkMax?: Megabit;\n  // http://wicg.github.io/netinfo/#downlink-attribute\n  readonly downlink?: Megabit;\n  // http://wicg.github.io/netinfo/#rtt-attribute\n  readonly rtt?: Millisecond;\n  // http://wicg.github.io/netinfo/#savedata-attribute\n  readonly saveData?: boolean;\n  // http://wicg.github.io/netinfo/#handling-changes-to-the-underlying-connection\n  onchange?: EventListener;\n}\n\n// https://w3c.github.io/device-memory/#sec-device-memory-js-api\nexport interface NavigatorDeviceMemory {\n  readonly deviceMemory?: number;\n}\n\nexport type NavigationTimingPolyfillEntry = Omit<\n  PerformanceNavigationTiming,\n  | 'initiatorType'\n  | 'nextHopProtocol'\n  | 'redirectCount'\n  | 'transferSize'\n  | 'encodedBodySize'\n  | 'decodedBodySize'\n  | 'toJSON'\n>;\n"]}/**
 * Configures global error listeners
 */
export declare function registerErrorInstrumentation(): void;
//# sourceMappingURL=errors.d.ts.map{"version":3,"file":"errors.d.ts","sourceRoot":"","sources":["../src/errors.ts"],"names":[],"mappings":"AAKA;;GAEG;AACH,wBAAgB,4BAA4B,IAAI,IAAI,CASnD"}Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("@sentry/utils");
var spanstatus_1 = require("./spanstatus");
var utils_2 = require("./utils");
/**
 * Configures global error listeners
 */
function registerErrorInstrumentation() {
    utils_1.addInstrumentationHandler({
        callback: errorCallback,
        type: 'error',
    });
    utils_1.addInstrumentationHandler({
        callback: errorCallback,
        type: 'unhandledrejection',
    });
}
exports.registerErrorInstrumentation = registerErrorInstrumentation;
/**
 * If an error or unhandled promise occurs, we mark the active transaction as failed
 */
function errorCallback() {
    var activeTransaction = utils_2.getActiveTransaction();
    if (activeTransaction) {
        utils_1.logger.log("[Tracing] Transaction: " + spanstatus_1.SpanStatus.InternalError + " -> Global error occured");
        activeTransaction.setStatus(spanstatus_1.SpanStatus.InternalError);
    }
}
//# sourceMappingURL=errors.js.map{"version":3,"file":"errors.js","sourceRoot":"","sources":["../src/errors.ts"],"names":[],"mappings":";AAAA,uCAAkE;AAElE,2CAA0C;AAC1C,iCAA+C;AAE/C;;GAEG;AACH,SAAgB,4BAA4B;IAC1C,iCAAyB,CAAC;QACxB,QAAQ,EAAE,aAAa;QACvB,IAAI,EAAE,OAAO;KACd,CAAC,CAAC;IACH,iCAAyB,CAAC;QACxB,QAAQ,EAAE,aAAa;QACvB,IAAI,EAAE,oBAAoB;KAC3B,CAAC,CAAC;AACL,CAAC;AATD,oEASC;AAED;;GAEG;AACH,SAAS,aAAa;IACpB,IAAM,iBAAiB,GAAG,4BAAoB,EAAE,CAAC;IACjD,IAAI,iBAAiB,EAAE;QACrB,cAAM,CAAC,GAAG,CAAC,4BAA0B,uBAAU,CAAC,aAAa,6BAA0B,CAAC,CAAC;QACzF,iBAAiB,CAAC,SAAS,CAAC,uBAAU,CAAC,aAAa,CAAC,CAAC;KACvD;AACH,CAAC","sourcesContent":["import { addInstrumentationHandler, logger } from '@sentry/utils';\n\nimport { SpanStatus } from './spanstatus';\nimport { getActiveTransaction } from './utils';\n\n/**\n * Configures global error listeners\n */\nexport function registerErrorInstrumentation(): void {\n  addInstrumentationHandler({\n    callback: errorCallback,\n    type: 'error',\n  });\n  addInstrumentationHandler({\n    callback: errorCallba