d and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nexport const observe = (type: string, callback: PerformanceEntryHandler): PerformanceObserver | undefined => {\n  try {\n    if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n      const po: PerformanceObserver = new PerformanceObserver(l => l.getEntries().map(callback));\n\n      po.observe({ type, buffered: true });\n      return po;\n    }\n  } catch (e) {\n    // Do nothing.\n  }\n  return;\n};\n"]}export interface OnHiddenCallback {
    ({ timeStamp, isUnloading }: {
        timeStamp: number;
        isUnloading: boolean;
    }): void;
}
export declare const onHidden: (cb: OnHiddenCallback, once?: boolean) => void;
//# sourceMappingURL=onHidden.d.ts.map{"version":3,"file":"onHidden.d.ts","sourceRoot":"","sources":["../../../../src/browser/web-vitals/lib/onHidden.ts"],"names":[],"mappings":"AAgBA,MAAM,WAAW,gBAAgB;IAE/B,CAAC,EAAE,SAAS,EAAE,WAAW,EAAE,EAAE;QAAE,SAAS,EAAE,MAAM,CAAC;QAAC,WAAW,EAAE,OAAO,CAAA;KAAE,GAAG,IAAI,CAAC;CACjF;AAkBD,eAAO,MAAM,QAAQ,gDAepB,CAAC"}/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var isUnloading = false;
var listenersAdded = false;
var onPageHide = function (event) {
    isUnloa