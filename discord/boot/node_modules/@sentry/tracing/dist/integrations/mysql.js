nReport, metric, po, reportAllChanges);\n\n    onHidden(({ isUnloading }) => {\n      po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n\n      if (isUnloading) {\n        metric.isFinal = true;\n      }\n      report();\n    });\n  }\n};\n"]}import { ReportHandler } from './types';
interface FIDPolyfillCallback {
    (value: number, event: Event): void;
}
interface FIDPolyfill {
    onFirstInputDelay: (onReport: FIDPolyfillCallback) => void;
}
declare global {
    interface Window {
        perfMetrics: FIDPolyfill;
    }
}
export declare const getFID: (onReport: ReportHandler) => void;
export {};
//# sourceMappingURL=getFID.d.ts.map{"version":3,"file":"getFID.d.ts","sourceRoot":"","sources":["../../../src/browser/web-vitals/getFID.ts"],"names":[],"mappings":"AAqBA,OAAO,EAAE,aAAa,EAAE,MAAM,SAAS,CAAC;AAExC,UAAU,mBAAmB;IAC3B,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,GAAG,IAAI,CAAC;CACrC;AAED,UAAU,WAAW;IACnB,iBAAiB,EAAE,CAAC,QAAQ,EAAE,mBAAmB,KAAK,IAAI,CAAC;CAC5D;AAED,OAAO,CAAC,MAAM,CAAC;IACb,UAAU,MAAM;QACd,WAAW,EAAE,WAAW,CAAC;KAC1B;CACF;AASD,eAAO,MAAM,MAAM,mCA4ClB,CAAC"}/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var bindReporter_1 = require("./lib/bindReporter");
var getFirstHidden_1 = require("./lib/getFirstHidden");
var initMetric_1 = require("./lib/initMetric");
var observe_1 = require("./lib/observe");
var onHidden_1 = require("./lib/onHidden");
exports.getFID = function (onReport) {
    var metric = initMetric_1.initMetric('FID');
    var firstHidden = getFirstHidden_1.getFirstHidden();
    var entryHandler = function (entry) {
        // Only report if the page wasn't hidden prior to the first input.
        if (entry.startTime < firstHidden.timeStamp) {
            metric.value = entry.processingStart - entry.startTime;
            metric.entries.push(entry);
            metric.isFinal = true;
            report();
        }
    };
    var