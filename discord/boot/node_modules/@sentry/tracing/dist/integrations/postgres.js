 as PerformanceEntryHandler);\n  const report = bindReporter(onReport, metric, po);\n\n  if (po) {\n    onHidden(() => {\n      po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n      po.disconnect();\n    }, true);\n  } else {\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      window.perfMetrics.onFirstInputDelay((value: number, event: Event) => {\n        // Only report if the page wasn't hidden prior to the first input.\n        if (event.timeStamp < firstHidden.timeStamp) {\n          metric.value = value;\n          metric.isFinal = true;\n          metric.entries = [\n            {\n              entryType: 'first-input',\n              name: event.type,\n              target: event.target,\n              cancelable: event.cancelable,\n              startTime: event.timeStamp,\n              processingStart: event.timeStamp + value,\n            } as PerformanceEventTiming,\n          ];\n          report();\n        }\n      });\n    }\n  }\n};\n"]}import { ReportHandler } from './types';
export declare const getLCP: (onReport: ReportHandler, reportAllChanges?: boolean) => void;
//# sourceMappingURL=getLCP.d.ts.map{"version":3,"file":"getLCP.d.ts","sourceRoot":"","sources":["../../../src/browser/web-vitals/getLCP.ts"],"names":[],"mappings":"AAsBA,OAAO,EAAE,aAAa,EAAE,MAAM,SAAS,CAAC;AAExC,eAAO,MAAM,MAAM,+DAuClB,CAAC"}/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var bindReporter_1 = require("./lib/bindReporter");
var getFirstHidden_1 = require("./lib/getFirstHidden");
var initMetric_1 = require("./lib/initMetric");
var observe_1 = require("./lib/observe");
var onHidden_1 = require("./lib/onHidden");
var whenInput_1 = require("./lib/whenInput");
exports.getLCP = function (onReport, reportAllChanges) {
    if (reportAllChanges === void 0) { reportAllChanges = false; }
    var metric = initMetric_1.initMetric('LCP');
    var firstHidden = getFirstHidden_1.getFirstHidden