n   * SDK-specific but typically around 2 seconds. Setting this too low can cause\n   * problems for sending events from command line applications. Setting it too\n   * high can cause the application to block for users with network connectivity\n   * problems.\n   */\n  shutdownTimeout?: number;\n\n  /**\n   * Sample rate to determine trace sampling.\n   *\n   * 0.0 = 0% chance of a given trace being sent (send no traces) 1.0 = 100% chance of a given trace being sent (send\n   * all traces)\n   *\n   * Tracing is enabled if either this or `tracesSampler` is defined. If both are defined, `tracesSampleRate` is\n   * ignored.\n   */\n  tracesSampleRate?: number;\n\n  /**\n   * Set of metadata about the SDK that can be internally used to enhance envelopes and events,\n   * and provide additional data about every request.\n   * */\n  _metadata?: SdkMetadata;\n\n  /**\n   * Options which are in beta, or otherwise not guaranteed to be stable.\n   */\n  _experiments?: {\n    [key: string]: any;\n  };\n\n  /**\n   * Function to compute tracing sample rate dynamically and filter unwanted traces.\n   *\n   * Tracing is enabled if either this or `tracesSampleRate` is defined. If both are defined, `tracesSampleRate` is\n   * ignored.\n   *\n   * Will automatically be passed a context object of default and optional custom data. See\n   * {@link Transaction.samplingContext} and {@link Hub.startTransaction}.\n   *\n   * @returns A sample rate between 0 and 1 (0 drops the trace, 1 guarantees it will be sent). Returning `true` is\n   * equivalent to returning 1 and returning `false` is equivalent to returning 0.\n   */\n  tracesSampler?(samplingContext: SamplingContext): number | boolean;\n\n  /**\n   * A callback invoked during event submission, allowing to optionally modify\n   * the event before it is sent to Sentry.\n   *\n   * Note that you must return a valid event from this callback. If you do not\n   * wish to modify the event, simply return it at the end.\n   * Returning null will cause the event to be dropped.\n   *\n   * @param event The error or message event generated by the SDK.\n   * @param hint May contain additional information about the original exception.\n   * @returns A new event that will be sent | null.\n   */\n  beforeSend?(event: Event, hint?: EventHint): PromiseLike<Event | null> | Event | null;\n\n  /**\n   * A callback invoked when adding a breadcrumb, allowing to optionally modify\n   * it before adding it to future events.\n   *\n   * Note that you must return a valid breadcrumb from this callback. If you do\n   * not wish to modify the breadcrumb, simply return it at the end.\n   * Returning null will cause the breadcrumb to be dropped.\n   *\n   * @param breadcrumb The breadcrumb as created by the SDK.\n   * @returns The breadcrumb that will be added | null.\n   */\n  beforeBreadcrumb?(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): Breadcrumb | null;\n}\n"]}/** JSDoc */
export interface Package {
    name: string;
    version: string;
}
//# sourceMappingURL=package.d.ts.map{"version":3,"file":"package.d.ts","sourceRoot":"","sources":["../src/package.ts"],"names":[],"mappings":"AAAA,YAAY;AACZ,MAAM,WAAW,OAAO;IACtB,IAAI,EAAE,MAAM,CAAC;IACb,OAAO,EAAE,MAAM,CAAC;CACjB"}Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=package.js.map{"version":3,"file":"package.js","sourceRoot":"","sources":["../src/package.ts"],"names":[],"mappings":"","sourcesContent":["/** JSDoc */\nexport interface Package {\n  name: string;\n  version: string;\n}\n"]}/** Possible SentryRequest types that can be used to make a distinction between Sentry features */
export declare type SentryRequestType = 'event' | 'transaction' | 'session';
/** A generic client request. */
export interface SentryRequest {
    body: string;
    type: SentryRequestType;
    url: string;
}
/** Request data included in an event as sent to Sentry */
export interface Request {
    url?: string;
    method?: string;
    data?: any;
    query_string?: string;
    cookies?: {
        [key: string]: string;
    };
    env?: {
