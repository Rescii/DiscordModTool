AAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAClD,OAAO,EAAE,GAAG,EAAE,MAAM,OAAO,CAAC;AAE5B,kCAAkC;AAClC,MAAM,WAAW,gBAAgB,CAAC,CAAC;IACjC;;OAEG;IACH,EAAE,EAAE,MAAM,CAAC;IAEX,KAAK,GAAG,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;CACzB;AAED,4BAA4B;AAC5B,MAAM,WAAW,WAAW;IAC1B;;OAEG;IACH,IAAI,EAAE,MAAM,CAAC;IAEb;;;OAGG;IACH,SAAS,CAAC,uBAAuB,EAAE,CAAC,QAAQ,EAAE,cAAc,KAAK,IAAI,EAAE,aAAa,EAAE,MAAM,GAAG,GAAG,IAAI,CAAC;CACxG"}Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=integration.js.map{"version":3,"file":"integration.js","sourceRoot":"","sources":["../src/integration.ts"],"names":[],"mappings":"","sourcesContent":["import { EventProcessor } from './eventprocessor';\nimport { Hub } from './hub';\n\n/** Integration Class Interface */\nexport interface IntegrationClass<T> {\n  /**\n   * Property that holds the integration name\n   */\n  id: string;\n\n  new (...args: any[]): T;\n}\n\n/** Integration interface */\nexport interface Integration {\n  /**\n   * Returns {@link IntegrationClass.id}\n   */\n  name: string;\n\n  /**\n   * Sets the integration up only once.\n   * This takes no options on purpose, options should be passed in the constructor\n   */\n  setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void;\n}\n"]}/** Console logging verbosity for the SDK. */
export declare enum LogLevel {
    /** No logs will be generated. */
    None = 0,
    /** Only SDK internal errors will be logged. */
    Error = 1,
    /** Information useful for debugging the SDK will be logged. */
    Debug = 2,
    /** All SDK actions will be logged. */
    Verbose = 3
}
//# sourceMappingURL=loglevel.d.ts.map{"version":3,"file":"loglevel.d.ts","sourceRoot":"","sources":["../src/loglevel.ts"],"names":[],"mappings":"AAAA,6CAA6C;AAC7C,oBAAY,QAAQ;IAClB,iCAAiC;IACjC,IAAI,IAAI;IACR,+CAA+C;IAC/C,KAAK,IAAI;IACT,+DAA+D;IAC/D,KAAK,IAAI;IACT,sCAAsC;IACtC,OAAO,IAAI;CACZ"}Object.defineProperty(exports, "__esModule", { value: true });
/** Console logging verbosity for the SDK. */
var LogLevel;
(function (LogLevel) {
    /** No logs will be generated. */
    LogLevel[LogLevel["None"] = 0] = "None";
    /** Only SDK internal errors will be logged. */
    LogLevel[LogLevel["Error"] = 1] = "Error";
    /** Information useful for debugging the SDK will be logged. */
    LogLevel[LogLevel["Debug"] = 2] = "Debug";
    /** All SDK actions will be logged. */
    LogLevel[LogLevel["Verbose"] = 3] = "Verbose";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
//# sourceMappingURL=loglevel.js.map{"version":3,"file":"loglevel.js","sourceRoot":"","sources":["../src/loglevel.ts"],"names":[],"mappings":";AAAA,6CAA6C;AAC7C,IAAY,QASX;AATD,WAAY,QAAQ;IAClB,iCAAiC;IACjC,uCAAQ,CAAA;IACR,+CAA+C;IAC/C,yCAAS,CAAA;IACT,+DAA+D;IAC/D,yCAAS,CAAA;IACT,sCAAsC;IACtC,6CAAW,CAAA;AACb,CAAC,EATW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QASnB","sourcesContent":["/** Console logging verbosity for the SDK. */\nexport enum LogLevel {\n  /** No logs will be generated. */\n  None = 0,\n  /** Only SDK internal errors will be logged. */\n  Error = 1,\n  /** Information useful for debugging the SDK will be logged. */\n  Debug = 2,\n  /** All SDK actions will be logged. */\n  Verbose = 3,\n}\n"]}/** JSDoc */
export interface Mechanism {
    type: string;
    handled: boolean;
    data?: {
        [key: string]: string | boolean;
    };
    synthetic?: boolean;
}
//# sourceMappingURL=mechanism.d.ts.map{"version":3,"file":"mechanism.d.ts","sourceRoot":"","sources":["../src/mechanism.ts"],"names":[],"mappings":"AAAA,YAAY;AACZ,MAAM,WAAW,SAAS;IACxB,IAAI,EAAE,MAAM,CAAC;IACb,OAAO,EAAE,OAAO,CAAC;IACjB,IAAI,CAAC,EAAE;QACL,CAAC,GAAG,EAAE,MAAM,GAAG,MAAM,GAAG,OAAO,CAAC;KACjC,CAAC;IACF,SAAS,CAAC,EAAE,OAAO,CAAC;CACrB"}Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=mechanism.js.map{"version":3,"file":"mechanism.js","sourceRoot":"","sources":["../src/mechanism.ts"],"names":[],"mappings":"","sourcesContent":["/** JSDoc */\nexport interface Mechanism {\n  type: string;\n  handled: boolean;\n  data?: {\n    [key: string]: string | boolean;\n  };\n  synthetic?: boolean;\n}\n"]}/**
 * Data extracted from an incoming request to a node server
 */
export interface ExtractedNodeRequestData {
    [key: string]: any;
    /** Specific headers from the request */
    headers?: {
        [key: string]: string;
    };
    /**  The request's method */
    method?: string;