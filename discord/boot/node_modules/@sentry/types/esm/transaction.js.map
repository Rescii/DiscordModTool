e of the context\n   * @param context an object containing context data. This data will be normalized. Pass `null` to unset the context.\n   */\n  setContext(name: string, context: Context | null): this;\n\n  /**\n   * Sets the Span on the scope.\n   * @param span Span\n   */\n  setSpan(span?: Span): this;\n\n  /**\n   * Returns the `Span` if there is one\n   */\n  getSpan(): Span | undefined;\n\n  /**\n   * Returns the `Transaction` attached to the scope (if there is one)\n   */\n  getTransaction(): Transaction | undefined;\n\n  /**\n   * Sets the `Session` on the scope\n   */\n  setSession(session?: Session): this;\n\n  /**\n   * Returns the `Session` if there is one\n   */\n  getSession(): Session | undefined;\n\n  /**\n   * Updates the scope with provided data. Can work in three variations:\n   * - plain object containing updatable attributes\n   * - Scope instance that'll extract the attributes from\n   * - callback function that'll receive the current scope as an argument and allow for modifications\n   * @param captureContext scope modifier to be used\n   */\n  update(captureContext?: CaptureContext): this;\n\n  /** Clears the current scope and resets its properties. */\n  clear(): this;\n\n  /**\n   * Sets the breadcrumbs in the scope\n   * @param breadcrumbs Breadcrumb\n   * @param maxBreadcrumbs number of max breadcrumbs to merged into event.\n   */\n  addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this;\n\n  /**\n   * Clears all currently set Breadcrumbs.\n   */\n  clearBreadcrumbs(): this;\n}\n"]}import { Package } from './package';
export interface SdkInfo {
    name: string;
    version: string;
    integrations?: string[];
    packages?: Package[];
}
//# sourceMappingURL=sdkinfo.d.ts.map{"version":3,"file":"sdkinfo.d.ts","sourceRoot":"","sources":["../src/sdkinfo.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC,MAAM,WAAW,OAAO;IACtB,IAAI,EAAE,MAAM,CAAC;IACb,OAAO,EAAE,MAAM,CAAC;IAChB,YAAY,CAAC,EAAE,MAAM,EAAE,CAAC;IACxB,QAAQ,CAAC,EAAE,OAAO,EAAE,CAAC;CACtB"}Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=sdkinfo.js.map{"version":3,"file":"sdkinfo.js","sourceRoot":"","sources":["../src/sdkinfo.ts"],"names":[],"mappings":"","sourcesContent":["import { Package } from './package';\n\nexport interface SdkInfo {\n  name: string;\n  version: string;\n  integrations?: string[];\n  packages?: Package[];\n}\n"]}import { SdkInfo } from './sdkinfo';
export interface SdkMetadata {
    sdk?: SdkInfo;
}
//# sourceMappingURL=sdkmetadata.d.ts.map{"version":3,"file":"sdkmetadata.d.ts","sourceRoot":"","sources":["../src/sdkmetadata.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC,MAAM,WAAW,WAAW;IAC1B,GAAG,CAAC,EAAE,OAAO,CAAC;CACf"}Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=sdkmetadata.js.map{"version":3,"file":"sdkmetadata.js","sourceRoot":"","sources":["../src/sdkmetadata.ts"],"names":[],"mappings":"","sourcesContent":["import { SdkInfo } from './sdkinfo';\n\nexport interface SdkMetadata {\n  sdk?: SdkInfo;\n}\n"]}import { User } from './user';
/**
 * @inheritdoc
 */
export interface Session extends Sess